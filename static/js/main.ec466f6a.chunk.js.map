{"version":3,"sources":["LineGraph.js","Logic/InputDataProcessor.js","Logic/DB/DataBaseCache.js","Database/FireBaseSetup.js","Logic/DB/DataBaseOnline.js","SelectionContainer.js","Components/UserDataInput.js","Components/UserDataRow.js","Components/DataContainer.js","WebsiteMain.js","index.js"],"names":["getCumulative","input","arr","cumulative","i","length","LineGraphChart","data","this","props","dates","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","options","maintainAspectRatio","Component","InputDataProcessor","entries","it","value","date","push","DataEntry","earliest","Date","earliest_int","Number","date_int","earliestDate","getEarliestDate","latestDate","getLatestDate","daysDifference","getDaysUntil","newDate","setDate","getDate","dateString","toISOString","substring","total","date1","date2","diff","getTime","Math","ceil","UserDate","values","User","name","userDates","dateEntry","add","DataBaseCache","users","user","getUser","names","firebase","initializeApp","databaseURL","database","DataBaseOnline","databaseCache","snapshot","callback","console","log","exists","forEach","child","key","sub","items","val","ref","on","triggerValueUpdate","userDateInput","get","then","set","catch","error","index","splice","useStyles","makeStyles","theme","root","width","maxWidth","palette","background","paper","default","margin","spacing","section1","section3","SelectionContainer","classes","className","InputLabel","Select","style","onChange","event","processUserSelect","target","map","MenuItem","Divider","variant","UserDataInput","Typography","color","Grid","container","alignItems","item","xs","TextField","type","defaultValue","activeDate","processDateChange","Button","maxHeight","minWidth","minHeight","onClick","addEntry","UserDataRow","useState","distance","setDistance","InputProps","endAdornment","InputAdornment","position","confirmInput","removeEntry","common","white","sectionColumnRight","float","DataContainer","isNaN","modifyEntry","modifyDate","userEntries","userDataBase","REMOVE_CACHED_USER","REMOVE_CACHED_DATE","WebsiteMain","setInput","setDates","userName","setUserName","setUserEntries","setActiveDate","dataLoaded","setDataLoaded","init","activeUser","getDistancesOnDate","processor","d","distances","j","addDataEntry","processorDates","getDates","processorInput","getAdditionOnDate","getDateLabel","getUserNames","remove","edit","update","LineGraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec466f6a.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction getCumulative(input)\r\n{\r\n  let arr = [];\r\n  let cumulative = 0;\r\n  for(let i=0;i<input.length;i++)\r\n  {\r\n    cumulative += input[i];\r\n    arr[i] = cumulative;\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction generateData(input, dates)\r\n{\r\n  return { \r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: \"Total distance (km)\",\r\n        data: getCumulative(input),\r\n        fill: true,\r\n        lineTension: 0,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nclass LineGraphChart extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <Line \r\n              data={generateData(this.props.data, this.props.dates)}\r\n              options =   \r\n              {\r\n                {\r\n                  maintainAspectRatio:false\r\n                }\r\n              }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineGraphChart;","export default class InputDataProcessor\r\n{\r\n    constructor()\r\n    {\r\n        this.entries = [];\r\n        this.it = 0;\r\n    }\r\n\r\n    addDataEntry(value, date)\r\n    {\r\n        this.entries.push(new DataEntry(value,date));\r\n    }\r\n\r\n    getEarliestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int < earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n\r\n        return new Date(earliest);\r\n    }\r\n\r\n    getLatestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int > earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n        \r\n        return new Date(earliest);\r\n    }\r\n\r\n    getDates()\r\n    {\r\n        let arr = [];\r\n\r\n        let earliestDate = this.getEarliestDate();\r\n        let latestDate = this.getLatestDate();\r\n\r\n        let daysDifference = this.getDaysUntil(earliestDate, latestDate) + 3;\r\n\r\n        for(let i=0;i<daysDifference;i++)\r\n        {\r\n            let newDate = new Date(earliestDate);\r\n            newDate.setDate(newDate.getDate() + i - 1);\r\n\r\n            let dateString = newDate.toISOString().substring(0, 10);\r\n\r\n            arr.push(dateString);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    getAdditionOnDate(date)\r\n    {\r\n        let total = 0;\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {       \r\n            if(this.entries[i].date === date) total += this.entries[i].value;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getDateLabel(date)\r\n    {       \r\n        return date; \r\n\r\n        //this can be used to customize labels based on the input\r\n    }\r\n\r\n    getDaysUntil(date1, date2)\r\n    {\r\n        let diff = date2.getTime() - date1.getTime();\r\n        let days = Math.ceil(diff/(1000*3600*24));\r\n        return days;\r\n    }\r\n}\r\n\r\nclass DataEntry\r\n{\r\n    constructor(value, date)\r\n    {\r\n        this.value = value;\r\n        this.date = date;\r\n    }\r\n}\r\n\r\n","class UserDate\r\n{\r\n    constructor(date)\r\n    {\r\n        this.date = date;\r\n\r\n        this.values = [];\r\n    }\r\n\r\n    add(value)\r\n    {\r\n        this.values.push(value);\r\n    }\r\n}\r\n\r\nclass User\r\n{\r\n    constructor(name)\r\n    {\r\n        this.name = name;\r\n\r\n        this.userDates = [];\r\n    }\r\n\r\n    add(date, value)\r\n    {\r\n        let dateEntry = this.getDate(date);\r\n        if(dateEntry === null)\r\n        {\r\n            dateEntry = new UserDate(date);\r\n            this.userDates.push(dateEntry);\r\n        }\r\n        dateEntry.add(value);\r\n    }\r\n\r\n    getDistancesOnDate(date)\r\n    {\r\n        let dateEntry = this.getDate(date);\r\n        if(dateEntry !== null)\r\n        {\r\n            return dateEntry.values;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getDate(date)\r\n    {\r\n        for(let i=0;i<this.userDates.length;i++)\r\n        {\r\n            if(this.userDates[i].date === date) return this.userDates[i];\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default class DataBaseCache\r\n{\r\n    constructor()\r\n    {\r\n        this.users = [];\r\n    }\r\n\r\n    add(name, date, value)\r\n    {\r\n        let user = this.getUser(name);\r\n        if(user === null)\r\n        {\r\n            user = new User(name);\r\n            this.users.push(user);\r\n        }\r\n        \r\n        user.add(date, value);\r\n    }\r\n\r\n    getUser(name)\r\n    {\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            if(this.users[i].name === name) return this.users[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getUserNames()\r\n    {\r\n        let names = [];\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            names.push(this.users[i].name);\r\n        }\r\n        return names;\r\n    }\r\n}","import firebase from 'firebase'\r\nimport \"firebase/database\"\r\n\r\n// Set the configuration for your app\r\n  var config = {\r\n    databaseURL: \"https://joriswebsitefirebase-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export {firebase};","import DataBaseCache from \"./DataBaseCache\";\r\n\r\n//data base testing\r\nimport {firebase} from '../../Database/FireBaseSetup.js'\r\nlet database = firebase.database();\r\n\r\nexport default class DataBaseOnline\r\n{\r\n    constructor()\r\n    {\r\n        //Store a local cached version of the database, since there is no way to directly access data\r\n        //The only way is to asynchronously call the database, where callbacks trigger the update\r\n\r\n        this.databaseCache = new DataBaseCache(); \r\n    }\r\n\r\n    triggerValueUpdate(snapshot, callback)\r\n    {\r\n        let database = new DataBaseCache();\r\n\r\n        console.log(\"updating dataa....\");\r\n\r\n        if(snapshot.exists())\r\n        {\r\n            snapshot.forEach(function(child) {\r\n                //names\r\n                let name = child.key;\r\n\r\n                //dates\r\n                child.forEach(function(sub)\r\n                {\r\n                    let date = sub.key;\r\n                    \r\n                    let items = sub.val();\r\n                    for(let i=0;i<items.length;i++)\r\n                    {\r\n                        let value = items[i];\r\n                        \r\n                        //Insert value\r\n                        database.add(name, date, value);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        this.databaseCache = database;\r\n                \r\n        callback();\r\n    }\r\n\r\n    init(callback)\r\n    {\r\n        this.callback = callback;\r\n\r\n        let userDateInput = database.ref(\"users\");\r\n        userDateInput.on('value', (snapshot) => {\r\n            this.triggerValueUpdate(snapshot, callback);\r\n        });\r\n    }\r\n\r\n    add(name, date, value)\r\n    {\r\n        console.log(\"ONLINE- > add\");\r\n        console.log(name + \" \" + date + \" \" + value);\r\n\r\n        let userDateInput = database.ref(\"users/\" + name + \"/\" + date);\r\n        \r\n        userDateInput.get().then(function(snapshot) {\r\n\r\n            //Emtpy array in case no entry exists yet\r\n            let data = [];\r\n\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              data = snapshot.val();\r\n            }\r\n\r\n            //Add the item to the collection\r\n            data.push(value);\r\n            \r\n            //Update the database value\r\n            userDateInput.set(data);\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    remove(name, date, index)\r\n    {\r\n        console.log(\"ONLINE- > remove\");\r\n\r\n        let userDateInput = database.ref(\"users/\" + name + \"/\" + date);\r\n\r\n        userDateInput.get().then(function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              let data = snapshot.val();\r\n\r\n              if(index < data.length)\r\n              {\r\n                  data.splice(index, 1);\r\n              }\r\n\r\n              userDateInput.set(data);\r\n            }\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    edit(name, date, index, value)\r\n    {\r\n        let userDateInput = database.ref(\"users/\" + name + \"/\" + date);\r\n\r\n        userDateInput.get().then(function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              let data = snapshot.val();\r\n\r\n              if(index < data.length)\r\n              {\r\n                  data[index] = value;\r\n              }\r\n\r\n              userDateInput.set(data);\r\n            }\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    update()\r\n    {\r\n        this.callback();\r\n    }\r\n}","import React from 'react';\r\n\r\n//material-ui imports\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(3, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n  \r\n  export default function SelectionContainer(props) {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.section1}>\r\n          <div className={classes.default}>\r\n          <InputLabel>Select the active user</InputLabel>\r\n          </div>\r\n\r\n          <Select\r\n            style={{ width: 160 }}\r\n            onChange={(event) => {\r\n              props.processUserSelect(event.target.value);\r\n            }}\r\n          >\r\n            {\r\n              props.items.map((value, index) => \r\n              (\r\n                <MenuItem value={value}>{value}</MenuItem>\r\n              ))\r\n            }\r\n          </Select>\r\n        </div>\r\n        <Divider variant=\"middle\" />\r\n      </div>\r\n    );\r\n  }","import TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction UserDataInput(props)\r\n{\r\n  return(\r\n    <div className=\"DataInputStyle\">\r\n      <Typography color=\"textSecondary\" variant=\"body2\">\r\n        Add entries for the selected date\r\n      </Typography>\r\n\r\n      <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n          <TextField\r\n        type=\"date\"\r\n        defaultValue={props.activeDate}\r\n        onChange={event => \r\n        {\r\n          props.processDateChange(event.target.value);\r\n        }}\r\n      /> \r\n          </Grid>\r\n          <Grid item>\r\n          <Button \r\n        color=\"primary\" \r\n        style={{maxWidth: '100px', maxHeight: '30px', minWidth: '100px', minHeight: '30px'}}          \r\n        variant=\"contained\" \r\n        onClick={props.addEntry}>\r\n            Add\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n      \r\n     \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserDataInput","import React, {useState} from 'react'\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction UserDataRow(props)\r\n{\r\n  const [distance, setDistance] = useState(props.distance);\r\n\r\n  return(\r\n    <div className=\"DataEntryStyle\">\r\n\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n          <TextField label=\"Distance\" \r\n          InputProps={{\r\n            endAdornment: <InputAdornment position=\"start\">km</InputAdornment>,\r\n          }}\r\n          value={distance}\r\n          onChange={event => \r\n          {\r\n            setDistance(event.target.value);\r\n\r\n            props.confirmInput(props.index, event.target.value)\r\n          }}\r\n        /> \r\n          </Grid>\r\n          <Grid item>\r\n          <Button \r\n          style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}          \r\n          color=\"secondary\" \r\n          variant=\"contained\" \r\n          onClick={event => \r\n          {\r\n              props.removeEntry(props.index);\r\n          }}\r\n        >\r\n          X\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n    </div>     \r\n  )\r\n}\r\n\r\nexport default UserDataRow;","//material-ui imports\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport UserDataInput from './UserDataInput'\r\nimport UserDataRow from './UserDataRow'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 500,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n    sectionColumnRight: {\r\n      width: '50%',\r\n      float: 'right',\r\n      margin: theme.spacing(3, 2),\r\n      backgroundColor: 'lightGray',\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(2, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n\r\nexport default function DataContainer(props) {\r\n  const classes = useStyles();\r\n\r\n  function addEntry()\r\n  {\r\n    props.addEntry(props.user);\r\n  }\r\n\r\n  function removeEntry(index)\r\n  {\r\n    props.removeEntry(props.user, index);  \r\n  }\r\n\r\n  function confirmInput(index, value)\r\n  {\r\n    let input = Number(value);\r\n    if(isNaN(input)) return;\r\n\r\n    props.modifyEntry(props.user, index, input);\r\n  }\r\n\r\n  function processDateChange(date)\r\n  {\r\n    props.modifyDate(props.user, date);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.section1}>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          Entry overview for {props.user.name}:\r\n        </Typography>\r\n      </div>\r\n\r\n      <div className=\"AreaInputNew\">\r\n        <div className=\"UserEntriesContainer\">\r\n          <UserDataInput addEntry={addEntry} activeDate={props.activeDate} processDateChange={processDateChange}/> \r\n          \r\n          {\r\n          props.userEntries.length === 0 &&\r\n\r\n          <div className=\"DataEntryStyle\">\r\n            <Typography color='primary' variant=\"body2\">\r\n              No entries yet for {props.user.name} on {props.activeDate}\r\n            </Typography>\r\n          </div>\r\n        }\r\n          \r\n          {\r\n            props.userEntries.map((value, index) => \r\n            (\r\n              <UserDataRow \r\n                name={props.user.name} \r\n                confirmInput={confirmInput} \r\n                removeEntry={removeEntry}\r\n                distance={value} \r\n                index={index}\r\n              />\r\n            ))\r\n          }  \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import './Styling/WebsiteMain.css'\r\n\r\n//react imports\r\nimport React, {useState} from 'react'\r\n\r\n//external imports\r\nimport LineGraphChart from './LineGraph'\r\nimport InputDataProcessor from './Logic/InputDataProcessor.js';\r\nimport DataBaseOnline from './Logic/DB/DataBaseOnline.js'\r\n\r\n//test imports\r\nimport SelectionContainer from './SelectionContainer.js'\r\nimport DataContainer from './Components/DataContainer.js'\r\n\r\nlet userDataBase = new DataBaseOnline();\r\n\r\nlet REMOVE_CACHED_USER = \"\";\r\nlet REMOVE_CACHED_DATE = new Date().toISOString().substring(0, 10);\r\n\r\nfunction WebsiteMain() {\r\n  const [input, setInput] = useState([0]);\r\n  const [dates, setDates] = useState([\"\"]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [userEntries, setUserEntries] = useState([]);\r\n  const [activeDate, setActiveDate] = useState(new Date().toISOString().substring(0, 10));\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  //TODO: use the dataLoaded flag to determine whether anything can be drawn to the screen\r\n  if(!dataLoaded)\r\n  {\r\n    //Initialization flag\r\n\r\n    //What to initialize:\r\n    //- UserDataBase (maybe even return an entire UserDataBase)\r\n    //- Return an EMTPY database, and then let the callback populate the object\r\n    //- use a useState to redraw the page\r\n\r\n    userDataBase.init(updateData);\r\n\r\n    setDataLoaded(true);\r\n  }\r\n\r\n  function processUserSelection(userName)\r\n  {\r\n    REMOVE_CACHED_USER = userName;\r\n\r\n    //Update the user name\r\n    setUserName(userName);\r\n\r\n    //Update the entries associated with that user name\r\n    let activeUser = userDataBase.databaseCache.getUser(REMOVE_CACHED_USER);\r\n    // if(activeUser!==null)\r\n    // {\r\n    //   activeUser.update(activeDate);\r\n    // }\r\n    if(activeUser!==null)\r\n    {\r\n      setUserEntries(activeUser.getDistancesOnDate(REMOVE_CACHED_DATE));\r\n    }\r\n  }\r\n\r\n  function updateData()\r\n  {\r\n    //TODO: refactor into maybe a different callback\r\n    let activeUser = userDataBase.databaseCache.getUser(REMOVE_CACHED_USER);\r\n    if(activeUser!==null)\r\n    {\r\n      setUserEntries(activeUser.getDistancesOnDate(REMOVE_CACHED_DATE));\r\n    }\r\n\r\n    //Go through all users in the user collection\r\n\r\n    //For each user, create a combination package consisting of:\r\n    //- labels\r\n    //- cumulatives per date\r\n\r\n    //We need an object that handles all input + date combinations\r\n    //These combinations then need to be transformed into a set of labels and inputs for the graph\r\n    let processor = new InputDataProcessor();\r\n\r\n    for(let i=0;i<userDataBase.databaseCache.users.length;i++)\r\n    {\r\n        let user = userDataBase.databaseCache.users[i];\r\n        for(let d=0;d<user.userDates.length;d++)\r\n        {\r\n          let dateEntry = user.userDates[d];\r\n          let date = dateEntry.date;\r\n          let distances = dateEntry.values;\r\n\r\n          for(let j=0;j<distances.length;j++)\r\n          {\r\n              processor.addDataEntry(distances[j], date);\r\n          }\r\n        }\r\n    }\r\n\r\n    //create input list for graph\r\n    let processorDates = processor.getDates();\r\n    let processorInput = [];\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorInput[i] = processor.getAdditionOnDate(processorDates[i]);\r\n    }\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorDates[i] = processor.getDateLabel(processorDates[i]);\r\n    }\r\n\r\n    setInput(processorInput);\r\n    setDates(processorDates);\r\n  }\r\n\r\n  function addEntry(user)\r\n  {\r\n    userDataBase.add(user.name, REMOVE_CACHED_DATE, 0);\r\n  }\r\n\r\n  function removeEntry(user, index)\r\n  {\r\n    userDataBase.remove(user.name, REMOVE_CACHED_DATE, index);\r\n  }\r\n\r\n  function modifyEntry(user, index, value)\r\n  {\r\n    userDataBase.edit(user.name, REMOVE_CACHED_DATE, index, value);\r\n  }\r\n\r\n  function modifyDate(user, date)\r\n  {\r\n    REMOVE_CACHED_DATE = date;\r\n\r\n    setActiveDate(date);\r\n\r\n    userDataBase.update();\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    <div className=\"UserContainer\">\r\n      <div className=\"PersonEntry\">\r\n        {\r\n          dataLoaded &&\r\n          <SelectionContainer items={userDataBase.databaseCache.getUserNames()} processUserSelect={processUserSelection}/>\r\n        }\r\n      </div>\r\n      {\r\n        userName.length > 0 &&\r\n        <div>\r\n          <DataContainer \r\n            user={userDataBase.databaseCache.getUser(userName)}\r\n            userEntries={userEntries}\r\n            activeDate={activeDate}\r\n            removeEntry={removeEntry}\r\n            addEntry={addEntry}\r\n            modifyEntry={modifyEntry}\r\n            modifyDate={modifyDate}\r\n          />\r\n        </div>      \r\n      }\r\n    </div>\r\n    <div className=\"GraphContainer\">\r\n      <LineGraphChart data={input} dates={dates}/>\r\n    </div>     \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default WebsiteMain;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styling/index.css';\r\nimport WebsiteMain from './WebsiteMain';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WebsiteMain/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}