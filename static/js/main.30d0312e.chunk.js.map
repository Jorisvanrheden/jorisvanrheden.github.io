{"version":3,"sources":["LineGraph.js","WebsiteMain.js","index.js"],"names":["getLabels","input","arr","i","length","getCumulative","cumulative","LineGraphChart","data","this","props","labels","datasets","label","fill","backgroundColor","borderColor","options","maintainAspectRatio","Component","AddEntry","console","log","state","textFieldValue","processItem","className","TextField","id","onChange","event","setState","target","value","type","defaultValue","Date","toISOString","substring","InputLabelProps","shrink","Button","variant","color","onClick","addValue","RegisterPerson","WebsiteMain","useState","setInput","number","parseFloat","isNaN","concat","map","index","LineGraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIA,SAASA,EAAUC,GAGjB,IADA,IAAIC,EAAM,GACFC,EAAE,EAAEA,EAAEF,EAAMG,OAAOD,IAEzBD,EAAIC,GAAKA,EAEX,OAAOD,EAGT,SAASG,EAAcJ,GAIrB,IAFA,IAAIC,EAAM,GACNI,EAAa,EACTH,EAAE,EAAEA,EAAEF,EAAMG,OAAOD,IAEzBG,GAAcL,EAAME,GACpBD,EAAIC,GAAKG,EAEX,OAAOJ,E,IA2CMK,E,4JAhBX,WAEI,OACI,cAAC,OAAD,CACEC,MAtBQP,EAsBWQ,KAAKC,MAAMF,KApBnC,CACLG,OAAQX,EAAUC,GAClBW,SAAU,CACR,CACEC,MAAO,sBACPL,KAAMH,EAAcJ,GACpBa,MAAM,EACNC,gBAAiB,uBACjBC,YAAa,yBAaPC,QAEE,CACEC,qBAAoB,KA1BtC,IAAsBjB,M,GAgBOkB,aCxCvBC,E,kDAEJ,WAAYV,GACX,IAAD,6BACE,cAAMA,GAENW,QAAQC,IAAIZ,GAEZ,EAAKa,MACL,CACEC,eAAgB,IAPpB,E,4CAWA,WAEEH,QAAQC,IAAI,kBAEZb,KAAKC,MAAMe,YAAYhB,KAAKc,MAAMC,kB,oBAGpC,WACC,IAAD,OACE,OACE,gCACA,qBAAKE,UAAU,cAAf,SACE,sDAEF,sBAAKA,UAAU,cAAf,UACE,cAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBf,MAAM,gBACnCgB,SAAU,SAAAC,GAEN,EAAKC,SAAS,CAACP,eAAgBM,EAAME,OAAOC,WAGlD,cAACN,EAAA,EAAD,CACAC,GAAG,OACHf,MAAM,OACNqB,KAAK,OACLC,cAAc,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IACpDC,gBAAiB,CACfC,QAAQ,QAIZ,qBAAKd,UAAU,cAAf,SACE,cAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,SAAAd,GAE/C,EAAKe,YAFX,mC,GA9Ce1B,aAwDjB2B,E,4JAEJ,WAEE,OACE,gCACA,qBAAKpB,UAAU,cAAf,SACE,kDAEF,qBAAKA,UAAU,cAAf,SACE,cAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBf,MAAM,OAAO6B,QAAQ,eAEtD,qBAAKhB,UAAU,cAAf,SACE,cAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,+B,GAbqBxB,aAgEd4B,MA5Cf,WAAwB,IAAD,EACKC,mBAAS,CAAC,IADf,mBACd/C,EADc,KACPgD,EADO,KAuBrB,OACA,gCACE,sBAAKvB,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,CAAUD,YApBd,SAAoBQ,GAElB,IAAIiB,EAASC,WAAWlB,GACxBZ,QAAQC,IAAI4B,GAERE,MAAMF,IAERD,EAAShD,EAAMoD,OAAOH,OAId,CAAC,EAAE,EAAE,GAWPI,KAAI,SAACrB,EAAOsB,GAAR,OAEN,4FAIN,qBAAK7B,UAAU,iBAAf,SACE,cAAC8B,EAAD,CAAgBhD,KAAMP,UCrH5BwD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.30d0312e.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction getLabels(input)\r\n{\r\n  let arr = [];\r\n  for(let i=0;i<input.length;i++)\r\n  {\r\n    arr[i] = i;\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction getCumulative(input)\r\n{\r\n  let arr = [];\r\n  let cumulative = 0;\r\n  for(let i=0;i<input.length;i++)\r\n  {\r\n    cumulative += input[i];\r\n    arr[i] = cumulative;\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction getTotal(input)\r\n{\r\n  let cumulative = getCumulative(input);\r\n  return cumulative[cumulative.length-1];\r\n}\r\n\r\nfunction generateData(input)\r\n{\r\n  return { \r\n    labels: getLabels(input),\r\n    datasets: [\r\n      {\r\n        label: \"Total distance (km)\",\r\n        data: getCumulative(input),\r\n        fill: true,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nclass LineGraphChart extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <Line \r\n              data={generateData(this.props.data)}\r\n              options =   \r\n              {\r\n                {\r\n                  maintainAspectRatio:false\r\n                }\r\n              }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineGraphChart;","import './WebsiteMain.css';\r\nimport { Component } from 'react';\r\nimport React, {useState} from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport LineGraphChart from './LineGraph'\r\n\r\nclass AddEntry extends Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n\r\n    console.log(props);\r\n\r\n    this.state =\r\n    {\r\n      textFieldValue: \"\"\r\n    };\r\n  }\r\n\r\n  addValue()\r\n  {\r\n    console.log(\"Button pressed\");\r\n\r\n    this.props.processItem(this.state.textFieldValue);\r\n  }\r\n\r\n  render()\r\n  {\r\n    return(\r\n      <div>\r\n      <div className=\"StandardDiv\">\r\n        <h3>Add a new distance</h3> \r\n      </div>\r\n      <div className=\"StandardDiv\">\r\n        <TextField id=\"standard-basic\" label=\"Distance (km)\" \r\n          onChange={event => \r\n            {\r\n              this.setState({textFieldValue: event.target.value});\r\n            }}\r\n        />\r\n        <TextField\r\n        id=\"date\"\r\n        label=\"Date\"\r\n        type=\"date\"\r\n        defaultValue={new Date().toISOString().substring(0, 10)}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n      />\r\n      </div>\r\n      <div className=\"StandardDiv\">\r\n        <Button variant=\"contained\" color=\"regular\" onClick={event => \r\n            {\r\n              this.addValue();\r\n            }}>Add distance</Button>\r\n      </div>\r\n      </div>   \r\n    )\r\n  }\r\n}\r\n\r\nclass RegisterPerson extends Component\r\n{\r\n  render()\r\n  {\r\n    return(\r\n      <div>\r\n      <div className=\"StandardDiv\">\r\n        <h2>Personal Entry</h2> \r\n      </div>\r\n      <div className=\"StandardDiv\">\r\n        <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\"/>\r\n      </div>\r\n      <div className=\"StandardDiv\">\r\n        <Button variant=\"contained\" color=\"regular\">Add user</Button>\r\n      </div>\r\n      </div>   \r\n    )\r\n  }\r\n}\r\n\r\nfunction WebsiteMain() {\r\n  const [input, setInput] = useState([0]);\r\n\r\n  function addPoint()\r\n  {\r\n    let addition = Math.floor(Math.random() * 30);\r\n    setInput(input.concat(addition));\r\n  }\r\n\r\n  function addNewItem(value)\r\n  {\r\n    let number = parseFloat(value);\r\n    console.log(number);\r\n\r\n    if(!isNaN(number))\r\n    {\r\n      setInput(input.concat(number));\r\n    }\r\n  }\r\n\r\n  const arr = [1,2,4];\r\n  \r\n\r\n  return (\r\n  <div>\r\n    <div className=\"UserContainer\">\r\n      <div className=\"PersonEntry\">\r\n        <RegisterPerson/>\r\n      </div>\r\n      <AddEntry processItem={addNewItem}/>\r\n      {\r\n        arr.map((value, index) => \r\n        (\r\n          <p>This is how we can display multiple items dynamically</p>\r\n        ))\r\n      }\r\n    </div>\r\n    <div className=\"GraphContainer\">\r\n      <LineGraphChart data={input}/>\r\n    </div>     \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default WebsiteMain;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport WebsiteMain from './WebsiteMain';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WebsiteMain />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}