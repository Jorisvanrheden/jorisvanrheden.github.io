{"version":3,"sources":["Components/NavigationBar/NavigationBar.tsx","Components/Footer/Footer.tsx","Body/Home.js","Components/Toolbar/ToolbarItem.tsx","Components/Toolbar/ToolbarItemGroup.tsx","Components/Toolbar/Toolbar.tsx","Components/GridNode/GridNode.tsx","Components/NavigationGrid/NavigationGrid.tsx","Logic/Pathfinding/Grid.tsx","Logic/Pathfinding/Pathfinding.tsx","Logic/Pathfinding/Action.tsx","Logic/Pathfinding/GridModel.tsx","Components/GridProject/GridProject.tsx","Body/About.tsx","Body/SoftwareProjects.js","Components/Dropdown/DropdownItem/DropdownItem.tsx","Components/Dropdown/DropdownHeader/DropdownHeader.tsx","Components/Dropdown/Dropdown.tsx","Components/SheetDisplayer/SheetDisplayer.tsx","Components/YoutubeEmbed/YoutubeEmbed.tsx","Components/ProjectContainer/ProjectContainerItem/ProjectContainerItem.tsx","Logic/ProjectInformation/YoutubeProjects.tsx","Components/ProjectContainer/ProjectContainer.tsx","Body/Youtube.js","Pages/Main.js","index.js"],"names":["menuItems","title","url","Navigationbar","useState","open","setOpen","className","map","item","index","href","onClick","isOpen","style","getStyle","Footer","Home","id","ToolbarItem","props","selected","setIndex","name","ToolbarItemGroup","activeIndex","setActiveIndex","getIsSelected","names","ToolbarItemButton","ToolbarItemInput","entries","defaultIndex","onIndexChanged","this","Toolbar","itemGroups","itemButtons","GridNode","walkable","status","getCellStyle","onMouseDown","processMouseClick","x","y","onMouseEnter","processMouseEnter","isMouseDown","NavigationGrid","gridModel","grid","getTiles","tiles","setTiles","handleMouseDown","processAction","handleMouseEnter","getStatus","start","target","i","path","length","attachObserver","row","xIndex","yIndex","document","body","onmousedown","onmouseup","Grid","xSize","ySize","initializeTiles","j","gridNode","push","Math","random","coordinate","neighbors","isValidTileCoordinate","slice","IPathfindable","collection","activeNode","link","splice","reverse","AStar","queue","visitedNodes","shift","getNeighboringTiles","collectionContains","console","log","process","DFS","foundTarget","recurse","constructPath","BFS","Dijkstra","IAction","DefaultAction","ToggleAction","callback","toggleWalkable","StartAction","set","setStart","TargetAction","setTarget","Coordinate","GridModel","pathTypes","activePathIndex","activeAction","observers","action","clear","notifyObservers","randomize","data","calculatePath","observer","includes","forEach","GridProject","inputToggleItems","inputButtonItems","getName","generateToolbarItemInput_Pathfinding","setPathfindingIndex","setActionIndex","generateToolbarItemInput_SingleActions","clearGrid","randomizeGrid","About","SoftwareProjects","DropdownItem","event","DropdownHeader","src","Dropdown","getSelectedStatus","description","class","SheetDisplayer","image","alt","YoutubeEmbed","frameBorder","allow","allowFullScreen","ProjectContainerItem","entry","location","download","YoutubeProjectEntries","ProjectContainer","Youtube","Main","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.946dd120.chunk.js","sourcesContent":["//styling imports\r\nimport { useState } from \"react\"\r\nimport \"./NavigationBar.css\"\r\n\r\ninterface NavigationMenuItem\r\n{\r\n    title:string;\r\n    url:string;\r\n}\r\n\r\nconst menuItems: Array<NavigationMenuItem> =\r\n[\r\n    {title: \"Home\", url: \"/\"},\r\n    {title: \"About\", url: \"/about\"},\r\n    {title: \"Software Projects\", url: \"/software\"},\r\n    {title: \"YouTube\", url: \"/youtube\"},\r\n]\r\n\r\nexport default function Navigationbar()\r\n{\r\n    const [open, setOpen] = useState(false);\r\n\r\n    function getStyle(isOpen:boolean)\r\n    {\r\n        let style = \"nav-dropdown\";\r\n\r\n        if(isOpen)\r\n        {\r\n            style += \" nav-dropdown-open\";\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className=\"nav\">\r\n            <div className=\"nav-left\">\r\n                <div className=\"nav-title\">\r\n                    Joris van Rheden\r\n                </div>\r\n            </div>\r\n            <div className=\"nav-right\">\r\n                <ul className=\"nav-menu\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        menuItems.map((item:NavigationMenuItem, index) => \r\n                        (\r\n                            <li key={index}>\r\n                                <a className=\"nav-item\" href={item.url}>\r\n                                    {item.title}\r\n                                </a>\r\n                            </li>                  \r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>    \r\n\r\n            <div className=\"hamburger\" \r\n                 onClick={()=>\r\n                 {\r\n                     setOpen(!open);\r\n                 }}\r\n            >\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n            </div>   \r\n\r\n            <div className={getStyle(open)}>\r\n                {\r\n                    menuItems.map((item:NavigationMenuItem, index) => \r\n                    (\r\n                        <a className=\"nav-dropdown-item\" href={item.url}>\r\n                            {item.title}\r\n                        </a>                \r\n                    ))\r\n                }        \r\n            </div>\r\n        </div>    \r\n    )\r\n}","import \"./Footer.css\"\r\n\r\nexport default function Footer()\r\n{\r\n    return(\r\n        <div className=\"footer-body\">\r\n            Joris van Rheden - 2021\r\n        </div>\r\n    )\r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from '../Components/NavigationBar/NavigationBar'\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">Main</div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import \"../../Components/Toolbar/Toolbar\"\r\n\r\ninterface Props\r\n{\r\n    name:string;\r\n    index:number;\r\n    selected:boolean;\r\n    \r\n    setIndex:(index:number) => void;\r\n}\r\n\r\nexport function ToolbarItem(props:Props)\r\n{\r\n    function getStyle()\r\n    {\r\n        let style = \"toolbar-item \";\r\n        if(props.selected)\r\n        {\r\n            style += \"toolbar-item-selected\";\r\n        }\r\n        else\r\n        {\r\n            style += \"toolbar-item-idle\";\r\n        }\r\n        \r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className={getStyle()}\r\n             onClick={()=>props.setIndex(props.index)}\r\n        >\r\n            <div className=\"toolbar-item-text\"> \r\n                {props.name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./Toolbar\"\r\n\r\nimport { useState } from \"react\";\r\nimport { ToolbarItem } from \"./ToolbarItem\"\r\n\r\ninterface Props\r\n{\r\n    title:string;\r\n    names:string[];\r\n    activeIndex:number;\r\n\r\n    setIndex:(index:number) => void;\r\n}\r\n\r\nexport function ToolbarItemGroup(props:Props)\r\n{\r\n    let [activeIndex, setActiveIndex] = useState(props.activeIndex);\r\n\r\n    function getIsSelected(index:number, activeIndex:number)\r\n    {\r\n        return index===activeIndex;\r\n    }\r\n\r\n    function setIndex(index:number)\r\n    {\r\n        setActiveIndex(index);\r\n        props.setIndex(index);\r\n    }\r\n\r\n    return(\r\n        <div className=\"toolbar-item-body\">\r\n            <div id=\"toolbar-items\">\r\n                <div className=\"toolbar-item-group\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        props.names.map((name:string, index) => \r\n                        (\r\n                            <ToolbarItem name={name} \r\n                                        selected={getIsSelected(index, activeIndex)} \r\n                                        index={index}\r\n                                        setIndex={setIndex}\r\n                            />              \r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>     \r\n    )\r\n}\r\n\r\nexport function ToolbarItemButton(props:Props)\r\n{\r\n    return(\r\n        <div className=\"toolbar-item-body\">\r\n            <div id=\"toolbar-items\">\r\n                <div className=\"toolbar-item-group\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        props.names.map((name:string, index) => \r\n                        (\r\n                            <ToolbarItem name={name} \r\n                                        selected={false} \r\n                                        index={index}\r\n                                        setIndex={props.setIndex}\r\n                            />              \r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import \"./Toolbar.css\"\r\n\r\nimport { ToolbarItemButton, ToolbarItemGroup } from \"./ToolbarItemGroup\"\r\n\r\nexport class ToolbarItemInput\r\n{\r\n    title:string;\r\n    entries:string[];\r\n    defaultIndex:number;\r\n\r\n    onIndexChanged:(index:number)=>void;\r\n\r\n    constructor(title:string, entries:string[], defaultIndex:number, onIndexChanged:(index:number)=>void)\r\n    {\r\n        this.title = title;\r\n        this.entries = entries;\r\n        this.defaultIndex = defaultIndex;\r\n\r\n        this.onIndexChanged = onIndexChanged;\r\n    } \r\n}\r\n\r\ninterface Props\r\n{\r\n    itemGroups:ToolbarItemInput[];\r\n    itemButtons:ToolbarItemInput[];\r\n}\r\n\r\nexport default function Toolbar(props:Props)\r\n{\r\n    return(\r\n        <div className=\"toolbar-body\">\r\n            {\r\n                props.itemGroups.map((item:ToolbarItemInput, index) => \r\n                (                    \r\n                    <ToolbarItemGroup \r\n                        title = {item.title}\r\n                        names={item.entries}\r\n                        activeIndex={item.defaultIndex}\r\n                        setIndex={item.onIndexChanged}\r\n                    /> \r\n                ))\r\n            }\r\n            {\r\n                props.itemButtons.map((item:ToolbarItemInput, index) => \r\n                (                    \r\n                    <ToolbarItemButton \r\n                        title = {item.title}\r\n                        names={item.entries}\r\n                        activeIndex={item.defaultIndex}\r\n                        setIndex={item.onIndexChanged}\r\n                    /> \r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import \"../GridNode/GridNode.css\"\r\n\r\ninterface Props\r\n{\r\n    x:number;\r\n    y:number;\r\n\r\n    walkable:boolean;\r\n    status:number;\r\n\r\n    processMouseClick:(x:number, y:number) => void;\r\n    processMouseEnter:(x:number, y:number) => void;\r\n}\r\n\r\nexport default function GridNode(props:Props)\r\n{   \r\n    function getCellStyle() {\r\n        let style = \"cell \";\r\n\r\n        if(!props.walkable)\r\n        {\r\n            style += \"dark \";\r\n        }\r\n        else\r\n        {\r\n            switch(props.status)\r\n            {\r\n                case 0:\r\n                    style+=\"light \";\r\n                    break;\r\n                case 1:\r\n                    style+=\"start \";\r\n                    break;\r\n                case 2:\r\n                    style+=\"target \";\r\n                    break;\r\n                case 3:\r\n                    style+=\"visited \";\r\n                    break;\r\n                case 4:\r\n                    style+=\"path \";\r\n                    break;\r\n                default:\r\n                    style+=\"light \";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={getCellStyle()}\r\n\r\n            onMouseDown={()=>props.processMouseClick(props.x, props.y)}\r\n            onMouseEnter={()=>props.processMouseEnter(props.x, props.y)}\r\n        >\r\n        </div>\r\n    )\r\n}","import \"../NavigationGrid/NavigationGrid.css\";\r\n\r\nimport { useState } from \"react\";\r\n\r\n//Logic imports\r\nimport GridNode from \"../GridNode/GridNode\";\r\n\r\nimport { GridModel } from \"../../Logic/Pathfinding/GridModel\";\r\n\r\ninterface Props\r\n{\r\n  gridModel:GridModel;\r\n}\r\n\r\nlet isMouseDown = false;\r\n\r\ndocument.body.onmousedown = function() { \r\n  isMouseDown = true;\r\n}\r\ndocument.body.onmouseup = function() { \r\n  isMouseDown = false;\r\n}\r\n\r\nexport default function NavigationGrid(props:Props) {\r\n  const [tiles, setTiles] = useState(props.gridModel.grid.getTiles());\r\n  \r\n  props.gridModel.attachObserver(setTiles);\r\n  // props.gridModel.attachPathObserver(display);\r\n\r\n  function display(data:any)\r\n  {\r\n    //Clean the animation statuses in the current grid\r\n    // props.grid.resetStatuses();\r\n    // setTiles(props.grid.getTiles());                    \r\n\r\n    //Draw searched paths\r\n    // for(let i=0;i<data.visitedNodes.length;i++)\r\n    // {\r\n    //   setTimeout(() => {\r\n    //     props.grid.setVisited(data.visitedNodes[i].x, data.visitedNodes[i].y);\r\n    //     setTiles(props.grid.getTiles());                    \r\n    //   }, i*50);\r\n    // }\r\n\r\n    //Draw determined paths\r\n    // for(let i=0;i<data.path.length;i++)\r\n    // {\r\n    //   setTimeout(() => {\r\n    //     props.gridModel.grid.setPath(data.path[i].x, data.path[i].y);\r\n    //     setTiles(props.gridModel.grid.getTiles());                    \r\n    //   }, i*50);\r\n    // }\r\n  }\r\n\r\n  function handleMouseDown(x:number, y:number)\r\n  {\r\n    props.gridModel.processAction(x, y);\r\n  }\r\n\r\n  function handleMouseEnter(x:number, y:number)\r\n  {\r\n    if(!isMouseDown) return;\r\n\r\n    props.gridModel.processAction(x, y);\r\n  }\r\n\r\n  function getStatus(x:number, y:number)\r\n  {\r\n    if(props.gridModel.start.x === x && props.gridModel.start.y === y) return 1;\r\n    if(props.gridModel.target.x === x && props.gridModel.target.y === y) return 2;\r\n    \r\n    for(let i=0; i<props.gridModel.path.length;i++)\r\n    {\r\n      if(props.gridModel.path[i].x == x && props.gridModel.path[i].y == y) return 4;\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n        <table className=\"table\">      \r\n          {tiles.map((row: any[], xIndex: number) => (\r\n            <tr>\r\n              {row.map((item: any, yIndex: number) => (\r\n                <td>\r\n                  <GridNode\r\n                      x={xIndex}\r\n                      y={yIndex}\r\n\r\n                      walkable={item.walkable}\r\n                      status={getStatus(xIndex, yIndex)}\r\n\r\n                      processMouseClick={handleMouseDown}\r\n                      processMouseEnter={handleMouseEnter}\r\n                  ></GridNode>      \r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div> \r\n  );\r\n}","export default class Grid\r\n{\r\n  xSize:number = 0;\r\n  ySize:number = 0;\r\n\r\n  private tiles:any = [];\r\n\r\n  // private DEFAULT:number = 0;\r\n  // private START:number = 1;\r\n  // private TARGET:number = 2;\r\n  // private VISITED:number = 3;\r\n  // private PATH:number = 4;\r\n\r\n  constructor(xSize:number, ySize:number)\r\n  {\r\n    this.xSize = xSize;\r\n    this.ySize = ySize;\r\n\r\n    this.tiles = this.initializeTiles();\r\n  }\r\n\r\n  initializeTiles() \r\n  {\r\n    const tiles:any = [];\r\n\r\n    for(let i=0;i<this.xSize;i++)\r\n    {\r\n        const row:any = [];\r\n        for(let j=0;j<this.ySize;j++)\r\n        {\r\n            const gridNode:any = {x:i, y:j, walkable:true};\r\n            row.push(gridNode);\r\n        }\r\n\r\n        tiles.push(row);\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  clear()\r\n  {\r\n    this.tiles = this.initializeTiles();\r\n  }\r\n\r\n  toggleWalkable(x:number, y:number)\r\n  {\r\n    this.tiles[x][y].walkable = !this.tiles[x][y].walkable;\r\n  }\r\n\r\n  randomize()\r\n  {\r\n    for(let i=0;i<this.xSize;i++)\r\n    {     \r\n      for(let j=0;j<this.ySize;j++)\r\n      {\r\n        this.tiles[i][j].walkable = Math.random() > 0.3;\r\n      }\r\n    }\r\n  }\r\n\r\n  getNeighboringTiles(coordinate:any)\r\n  {\r\n    let neighbors:any = [];\r\n\r\n    if(this.isValidTileCoordinate(coordinate.x-1, coordinate.y)) neighbors.push({x: coordinate.x-1, y:coordinate.y});\r\n    if(this.isValidTileCoordinate(coordinate.x, coordinate.y-1)) neighbors.push({x: coordinate.x, y:coordinate.y-1});\r\n    if(this.isValidTileCoordinate(coordinate.x+1, coordinate.y)) neighbors.push({x: coordinate.x+1, y:coordinate.y});\r\n    if(this.isValidTileCoordinate(coordinate.x, coordinate.y+1)) neighbors.push({x:coordinate. x, y:coordinate.y+1});\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  getTiles()\r\n  {\r\n    return this.tiles.slice();\r\n  }\r\n\r\n  /***Helper functions***/\r\n  isValidTileCoordinate(x:number, y:number)\r\n  {\r\n    if(x < 0 || x >= this.tiles.length) return false;\r\n    if(y < 0 || y >= this.tiles[0].length) return false;\r\n\r\n    return this.tiles[x][y].walkable;\r\n  }\r\n  /***Helper functions***/\r\n  \r\n}","import Grid from \"../Pathfinding/Grid\"\r\n\r\nexport abstract class IPathfindable\r\n{\r\n    abstract getName():string;\r\n    abstract calculatePath(grid:Grid, start:any, target:any):any;\r\n\r\n    collectionContains(collection:any[], item:any)\r\n    {\r\n        for(let i=0;i<collection.length;i++)\r\n        {\r\n            if(collection[i].x === item.x &&\r\n               collection[i].y === item.y) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructPath(target:any)\r\n    {\r\n        let path:any[] = [];\r\n        \r\n        let activeNode = target;\r\n\r\n        while(activeNode.link != null)\r\n        {\r\n            path.push(activeNode);\r\n\r\n            activeNode = activeNode.link;\r\n        }\r\n\r\n        //remove target from list\r\n        if(path.length>0)path.splice(0,1);\r\n\r\n        return path.reverse();\r\n    }\r\n}\r\n\r\nexport class AStar extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"AStar\"\r\n    }\r\n\r\n    process(grid:Grid, start:any, target:any)\r\n    {\r\n        let queue:any[] = [];\r\n        let visitedNodes:any[] = [];\r\n\r\n        queue.push(start);\r\n\r\n        while(queue.length>0)\r\n        {\r\n            //Use first node in queue\r\n            let activeNode = queue.shift();          \r\n\r\n            //find neighbors of active node\r\n            const neighbors:any[] = grid.getNeighboringTiles(activeNode);\r\n\r\n            //add neighbors to queue, but only if not processed before\r\n            for(let i=0;i<neighbors.length;i++)\r\n            {                \r\n                if(!this.collectionContains(visitedNodes, neighbors[i]))\r\n                {\r\n                    if(neighbors[i].x === target.x &&\r\n                       neighbors[i].y === target.y) return visitedNodes;\r\n\r\n                    visitedNodes.push(neighbors[i]);\r\n\r\n                    //add to queue\r\n                    queue.push(neighbors[i]);\r\n                }        \r\n            }\r\n        }\r\n\r\n        return visitedNodes;\r\n    }\r\n\r\n    calculatePath(grid:Grid, start:any, target:any): any {\r\n        console.log(\"Astar algo\");\r\n\r\n        //Depth first search\r\n        //const visitedNodes:any[] = this.dfs(grid, start, target);\r\n\r\n        //Breadth first search\r\n        const visitedNodes:any[] = this.process(grid, start, target);\r\n\r\n\r\n        const output = {visitedNodes: visitedNodes};\r\n        return output;\r\n    }    \r\n}\r\n\r\nexport class DFS extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"DFS\"\r\n    }\r\n\r\n    recurse(visitedNodes:any[], grid:Grid, activeNode:any, target:any):Boolean\r\n    {\r\n        //find neighbors of active node\r\n        const neighbors:any[] = grid.getNeighboringTiles(activeNode);\r\n        for(let i=0;i<neighbors.length;i++)\r\n        {\r\n            //if the target is found, return\r\n            if(neighbors[i].x === target.x &&\r\n               neighbors[i].y === target.y)\r\n            {\r\n                target.link = activeNode;\r\n                return true;\r\n            } \r\n            \r\n            //store the connected node\r\n            neighbors[i].link = activeNode;\r\n            \r\n            if(!this.collectionContains(visitedNodes, neighbors[i]))\r\n            {\r\n                //add the active node to the visited nodes list\r\n                visitedNodes.push(neighbors[i]);\r\n\r\n                const foundTarget = this.recurse(visitedNodes, grid, neighbors[i], target);\r\n\r\n                //stop searching only if the target has been found\r\n                if(foundTarget) return foundTarget;\r\n            }        \r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    process(grid:Grid, start:any, target:any)\r\n    {\r\n        let visitedNodes:any[] = [];\r\n        \r\n        let foundTarget:Boolean = this.recurse(visitedNodes, grid, start, target);\r\n\r\n        return visitedNodes;\r\n    }\r\n\r\n    calculatePath(grid:Grid, start:any, target:any): any {\r\n        //Depth first search\r\n        const visitedNodes:any[] = this.process(grid, start, target);\r\n        const path = this.constructPath(target);\r\n\r\n        const output = {visitedNodes: visitedNodes, path: path};\r\n        return output;\r\n    }    \r\n}\r\n\r\nexport class BFS extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"BFS\"\r\n    }\r\n\r\n    process(grid:Grid, start:any, target:any)\r\n    {\r\n        let queue:any[] = [];\r\n        let visitedNodes:any[] = [];\r\n\r\n        queue.push(start);\r\n\r\n        while(queue.length>0)\r\n        {\r\n            //Use first node in queue\r\n            let activeNode = queue.shift();          \r\n\r\n            //find neighbors of active node\r\n            const neighbors:any[] = grid.getNeighboringTiles(activeNode);\r\n\r\n            //add neighbors to queue, but only if not processed before\r\n            for(let i=0;i<neighbors.length;i++)\r\n            {\r\n                if(neighbors[i].x === target.x &&\r\n                   neighbors[i].y === target.y) \r\n                {\r\n                    target.link = activeNode;\r\n                    return visitedNodes;\r\n                }\r\n\r\n                //store the connected node\r\n                neighbors[i].link = activeNode;\r\n\r\n                if(!this.collectionContains(visitedNodes, neighbors[i]))\r\n                {\r\n                    visitedNodes.push(neighbors[i]);\r\n\r\n                    //add to queue\r\n                    queue.push(neighbors[i]);\r\n                }        \r\n            }\r\n        }\r\n\r\n        return visitedNodes;\r\n    }\r\n\r\n    calculatePath(grid:Grid, start:any, target:any): any {\r\n        const visitedNodes:any[] = this.process(grid, start, target);\r\n        const path = this.constructPath(target);\r\n\r\n        const output = {visitedNodes: visitedNodes, path: path};\r\n        return output;\r\n    }    \r\n}\r\n\r\nexport class Dijkstra extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"Dijkstra\"\r\n    }\r\n    calculatePath(grid:Grid, start:any, target:any): any {\r\n        console.log(\"Dijkstra algo\");\r\n    }    \r\n}\r\n\r\n","import Grid from \"../Pathfinding/Grid\"\r\nimport { GridModel } from \"./GridModel\";\r\n\r\nexport abstract class IAction\r\n{\r\n  abstract process(x:number, y:number):void;\r\n}\r\n\r\nexport class DefaultAction extends IAction\r\n{\r\n  process(x:number, y:number): void {\r\n  }\r\n}\r\n\r\nexport class ToggleAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n  callback:(grid:any) => void;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.toggleWalkable(x,y);\r\n  }\r\n}\r\n\r\nexport class StartAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n  set:(value:any) => void;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.setStart(x,y);\r\n  }\r\n}\r\n\r\nexport class TargetAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.setTarget(x,y);\r\n  }\r\n}","import Grid from \"./Grid\"\r\nimport {DFS, BFS, AStar, Dijkstra, IPathfindable} from \"../../Logic/Pathfinding/Pathfinding\";\r\nimport {IAction, DefaultAction, ToggleAction, StartAction, TargetAction} from \"../../Logic/Pathfinding/Action\";\r\n\r\nclass Coordinate\r\n{\r\n    x:number;\r\n    y:number;\r\n\r\n    constructor(x:number, y:number)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport class GridModel\r\n{\r\n    grid:Grid = new Grid(20,30);\r\n\r\n    pathTypes:IPathfindable[] = [new BFS(), new DFS(), new AStar(), new Dijkstra()];\r\n    activePathIndex:number = 0;\r\n\r\n    activeAction:IAction = new DefaultAction();\r\n\r\n    start:Coordinate = new Coordinate(-1, -1);\r\n    target:Coordinate = new Coordinate(-1, -1);\r\n\r\n    path:Coordinate[] = [];\r\n\r\n    observers:any[] = [];\r\n\r\n    constructor()\r\n    {\r\n\r\n    }\r\n\r\n    setPathfindingIndex(index:number)\r\n    {\r\n        if(index < 0 || index >= this.pathTypes.length) return;\r\n\r\n        this.activePathIndex = index;\r\n    }\r\n\r\n    setActionIndex(index:number)\r\n    {\r\n        switch(index)\r\n        {\r\n            case 0:\r\n                this.activeAction = new ToggleAction(this);\r\n                break;\r\n            case 1:\r\n                this.activeAction = new StartAction(this);\r\n                break;\r\n            case 2:\r\n                this.activeAction = new TargetAction(this);\r\n        }\r\n    }\r\n\r\n    processAction(x:number, y:number)\r\n    {\r\n        this.activeAction.process(x, y);\r\n    }\r\n\r\n    setAction(action:IAction)\r\n    {\r\n        this.activeAction = action;\r\n    }\r\n\r\n    clearGrid()\r\n    {\r\n        this.grid.clear();\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    randomizeGrid()\r\n    {\r\n        this.grid.randomize();\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    calculatePath()\r\n    {\r\n        let data = this.pathTypes[this.activePathIndex].calculatePath(this.grid, this.start, this.target);   \r\n        \r\n        this.path = [];\r\n        this.path = data.path;\r\n        this.notifyObservers();\r\n        // for(let i=0;i<data.path.length;i++)\r\n        // {\r\n        //     setTimeout(() => \r\n        //     {\r\n        //         this.path.push(data.path[i]);\r\n        //         this.notifyObservers();                \r\n        //     }, i*50);\r\n        // }\r\n    }\r\n\r\n    toggleWalkable(x:number, y:number)\r\n    {\r\n        this.grid.toggleWalkable(x,y);\r\n        this.calculatePath()\r\n\r\n        // this.notifyObservers();\r\n    }\r\n\r\n    setStart(x:number, y:number)\r\n    {\r\n        this.start = new Coordinate(x, y);\r\n        this.calculatePath()\r\n\r\n        // this.notifyObservers();\r\n    }\r\n\r\n    setTarget(x:number, y:number)\r\n    {\r\n        this.target = new Coordinate(x, y);\r\n        this.calculatePath();\r\n\r\n        // this.notifyObservers();\r\n    }\r\n\r\n    attachObserver(observer:any)\r\n    {\r\n        if(!this.observers.includes(observer))\r\n        {\r\n            this.observers.push(observer);\r\n        }\r\n    }\r\n\r\n    notifyObservers()\r\n    {\r\n        let tiles = this.grid.getTiles();\r\n\r\n        this.observers.forEach(callback => {\r\n            callback(tiles);\r\n        });\r\n    }\r\n}","import \"./GridProject.css\"\r\n\r\nimport Toolbar from \"../../Components/Toolbar/Toolbar\"\r\nimport NavigationGrid from \"../../Components/NavigationGrid/NavigationGrid\"\r\nimport { GridModel } from \"../../Logic/Pathfinding/GridModel\"\r\n\r\n//Logic imports\r\nimport {DFS, BFS, AStar, Dijkstra, IPathfindable} from \"../../Logic/Pathfinding/Pathfinding\";\r\nimport { ToolbarItemInput } from \"../../Components/Toolbar/Toolbar\";\r\n\r\nconst pathTypes:IPathfindable[] = [new BFS(), new DFS(), new AStar(), new Dijkstra()];\r\n\r\nfunction generateToolbarItemInput_Pathfinding(defaultIndex:number, onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [];\r\n    for(let i = 0; i< pathTypes.length;i++)\r\n    {\r\n        names.push(pathTypes[i].getName());\r\n    }   \r\n    return new ToolbarItemInput(\"Pathfinding\", names, defaultIndex, onIndexChanged);\r\n}\r\n\r\nfunction generateToolbarItemInput_ActionTypes(defaultIndex:number, onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [\"Toggle\", \"Set Start\", \"Set Target\"];\r\n    return new ToolbarItemInput(\"Action\", names, defaultIndex, onIndexChanged);\r\n}\r\n\r\nfunction generateToolbarItemInput_SingleActions(onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [\"Clear\", \"Randomize\", \"Calculate\"];\r\n    return new ToolbarItemInput(\"Single actions\", names, -1, onIndexChanged);\r\n}\r\n\r\nexport default function GridProject()\r\n{\r\n    let gridModel:GridModel = new GridModel();\r\n\r\n    let inputToggleItems:ToolbarItemInput[] = [];\r\n    let inputButtonItems:ToolbarItemInput[] = [];\r\n\r\n    let defaultPathfindTypeIndex:number = 0;\r\n    let defaultActionTypeIndex:number = 0;\r\n\r\n    inputToggleItems.push(generateToolbarItemInput_Pathfinding(defaultPathfindTypeIndex, setPathfindIndex));\r\n    inputToggleItems.push(generateToolbarItemInput_ActionTypes(defaultActionTypeIndex, setActionTypeIndex));\r\n    \r\n    inputButtonItems.push(generateToolbarItemInput_SingleActions(setSingleActionIndex));\r\n\r\n    gridModel.setPathfindingIndex(defaultPathfindTypeIndex);\r\n    gridModel.setActionIndex(defaultActionTypeIndex);\r\n\r\n    function setPathfindIndex(index:number)\r\n    {\r\n        gridModel.setPathfindingIndex(index);\r\n    }\r\n    function setActionTypeIndex(index:number)\r\n    {\r\n        gridModel.setActionIndex(index);\r\n    }\r\n    function setSingleActionIndex(index:number)\r\n    {\r\n        switch(index)\r\n        {\r\n            case 0:\r\n                gridModel.clearGrid();\r\n                break;\r\n            case 1:\r\n                gridModel.randomizeGrid();\r\n                break;\r\n            case 2:\r\n                gridModel.calculatePath();\r\n                break;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"grid-container\">\r\n            <div id=\"control-panel\">\r\n                <Toolbar \r\n                    itemGroups={inputToggleItems}\r\n                    itemButtons={inputButtonItems}\r\n                />\r\n            </div>\r\n            <div id=\"display\">\r\n                <NavigationGrid gridModel={gridModel}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from \"../Components/NavigationBar/NavigationBar\"\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nimport GridProject from \"../Components/GridProject/GridProject\"\r\n\r\nexport default function About()\r\n{  \r\n  return(\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <GridProject/>      \r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )  \r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from '../Components/NavigationBar/NavigationBar'\r\n\r\nexport default function SoftwareProjects() {\r\n  return (\r\n  <div className=\"WebsiteMainContainer\">\r\n    <NavigationBar/>\r\n  </div>\r\n  );\r\n}","import \"./DropdownItem.css\"\r\n\r\ninterface Props\r\n{\r\n  title:string;\r\n  selected:boolean;\r\n  index:number;\r\n\r\n  setIndex:(index:number) => void;\r\n}\r\n\r\nexport default function DropdownItem(props:Props)\r\n{\r\n    function getStyle() \r\n    {\r\n        let style = \"dropdown-item \";\r\n\r\n        if(props.selected)\r\n        {\r\n            style += \"dropdown-item-selected\";\r\n        }\r\n        else\r\n        {\r\n            style += \"dropdown-item-idle\";\r\n        }\r\n\r\n        return style;\r\n    }    \r\n\r\n    return(\r\n        <div>\r\n            <div className={getStyle()}\r\n                 onClick={event => \r\n                    {\r\n                        props.setIndex(props.index);\r\n                    }}\r\n            >\r\n                {props.title}\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import \"./DropdownHeader.css\"\r\n\r\ninterface Props\r\n{\r\n  \r\n}\r\n\r\nexport default function DropdownHeader(props:Props)\r\n{\r\n    return(\r\n        <div>\r\n            <div className=\"dropdown-header\">\r\n                <img className=\"dropdown-logo\" src=\"youtube.png\"></img>\r\n                YouTube (joris1992)\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import \"./Dropdown.css\"\r\nimport DropdownItem from \"./DropdownItem/DropdownItem\"\r\nimport DropdownHeader from \"./DropdownHeader/DropdownHeader\"\r\n\r\nimport YoutubeProjectData from \"./../../Logic/ProjectInformation/YoutubeProjects\"\r\n\r\ninterface Props\r\n{\r\n  entries:Array<YoutubeProjectData>;\r\n  activeIndex:number;\r\n\r\n  setIndex:(index:number) => void;\r\n}\r\n\r\nexport default function Dropdown(props:Props)\r\n{\r\n    function getSelectedStatus(index:number)\r\n    {\r\n        return index === props.activeIndex;\r\n    }\r\n\r\n    return(\r\n        <div className=\"dropdown-body\">\r\n            <DropdownHeader/>\r\n            {\r\n                props.entries.map((item:YoutubeProjectData, index) => \r\n                (\r\n                    <DropdownItem title={item.description}\r\n                                    selected={getSelectedStatus(index)}\r\n                                    index={index}\r\n                                    setIndex={props.setIndex}\r\n                    />            \r\n                ))\r\n            } \r\n        </div>    \r\n    )\r\n}","import \"./SheetDisplayer.css\"\r\n\r\ninterface Props\r\n{\r\n    image:string;\r\n    location:string;\r\n}\r\n\r\ninterface test\r\n{\r\n    title:string;\r\n    class:string,\r\n    url:string;\r\n}\r\n\r\nconst menuItems: Array<test> =\r\n[\r\n    {title: \"Home\", class: \"nav-item\", url: \"/\"},\r\n    {title: \"About\", class: \"nav-item\", url: \"/about\"},\r\n    {title: \"Software Projects\", class: \"nav-item\", url: \"/software\"},\r\n    {title: \"Youtube\", class: \"nav-item\", url: \"/youtube\"},\r\n]\r\n\r\nexport default function SheetDisplayer(props:Props)\r\n{\r\n    return(\r\n        <div className=\"sheet-container\">\r\n            <div id=\"preview\">\r\n                <img className=\"preview-image\" src=\"music.png\"></img>\r\n            </div>\r\n            <div id=\"overview\">\r\n                <div className=\"sheet-body\">\r\n                    <ul className=\"sheet-grid\">\r\n                        {\r\n                            menuItems.map((item:test, index) => \r\n                            (\r\n                                <li>\r\n                                    <img className=\"sheet-item\" src={props.image} alt=\"ss\"></img>\r\n                                </li>                  \r\n                            ))                                     \r\n                        }\r\n                    </ul> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import \"./YoutubeEmbed.css\"\r\n\r\ninterface Props\r\n{\r\n    description:string;\r\n    url:string;\r\n}\r\n\r\nexport default function YoutubeEmbed(props:Props)\r\n{\r\n    return(\r\n        <div className=\"embed-body\"> \r\n            <iframe\r\n                src={props.url} \r\n                title=\"YouTube video player\" \r\n                frameBorder=\"0\" \r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                allowFullScreen>\r\n            </iframe>\r\n        </div>     \r\n    )\r\n}\r\n\r\n","import YoutubeProjectData from \"../../../Logic/ProjectInformation/YoutubeProjects\"\r\nimport YoutubeEmbed from \"../../YoutubeEmbed/YoutubeEmbed\"\r\nimport \"./ProjectContainerItem.css\"\r\n\r\ninterface Props\r\n{\r\n  entry:YoutubeProjectData\r\n}\r\n\r\nexport default function ProjectContainerItem(props:Props)\r\n{\r\n    return(\r\n        <div className=\"projectcontainer-container\">\r\n            <div className=\"projectcontainer-item\">\r\n                {/* Square\r\n                Video top \r\n                bottom row has the download button */}\r\n                <div className=\"projectcontainer-item-video\">\r\n                    <YoutubeEmbed \r\n                        description={props.entry.description}\r\n                        url={props.entry.url}\r\n                    />\r\n                </div>\r\n                <div className=\"projectcontainer-item-description\">\r\n                    {props.entry.description}\r\n\r\n                    <a href={props.entry.location} download>\r\n                        <img className=\"projectcontainer-item-logo\" src=\"pdf.png\" ></img>  \r\n                    </a>           \r\n                </div>       \r\n            </div>\r\n        </div>         \r\n    )\r\n}","export default interface YoutubeProjectData\r\n{\r\n    url:string;\r\n    description:string,\r\n    image:string;\r\n    location:string;\r\n}\r\n\r\nexport const YoutubeProjectEntries: Array<YoutubeProjectData> =\r\n[\r\n    {\r\n        url: \"https://www.youtube.com/embed/Kmu96X8t9F0\",\r\n        description: \"Death Note - Low of Solipsism\",\r\n        image: \"music.png\",\r\n        location: \"sheet_music/Death Note - Low of Solipsism.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/L0et5Yf25h8\",\r\n        description: \"One Piece - Becoming the Pirate King\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Becoming the Pirate King.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/WNMRrK5s5zc\",\r\n        description: \"One Piece - Difficult\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Difficult.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/hrvGv3K-t68\",\r\n        description: \"One Piece - The Very Very Very Strongest\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - The Very Very Very Strongest.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/9ZwATJgLNKc\",\r\n        description: \"One Piece - The Worlds Number One\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - The Worlds Number One.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/49xRC3QFnvg\",\r\n        description: \"One Piece - To the Grand Line\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - To the Grand Line.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/UHXxULlzd_4\",\r\n        description: \"One Piece - Wake Up\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Wake Up.pdf\"\r\n    },\r\n]","import \"./ProjectContainer.css\"\r\n\r\nimport Dropdown from '../Dropdown/Dropdown'\r\nimport SheetDisplayer from \"../SheetDisplayer/SheetDisplayer\"\r\nimport ProjectContainerItem from \"./ProjectContainerItem/ProjectContainerItem\"\r\n\r\nimport {YoutubeProjectEntries} from \"./../../Logic/ProjectInformation/YoutubeProjects\"\r\n\r\nimport {useState} from 'react'\r\n\r\nexport default function ProjectContainer()\r\n{\r\n    const [index, setIndex] = useState(0);\r\n\r\n    function updateIndex(index:number)\r\n    {\r\n        setIndex(index);\r\n    }\r\n\r\n    return(\r\n        <div className=\"project-body\">\r\n            <div id=\"dropdown\">\r\n                <Dropdown entries={YoutubeProjectEntries}\r\n                            activeIndex={index}\r\n                            setIndex={updateIndex}/>\r\n            </div>\r\n            <div id=\"video\">\r\n                <ProjectContainerItem entry={YoutubeProjectEntries[index]}/>\r\n            </div>\r\n            <div id=\"sheet\">\r\n                <SheetDisplayer image={YoutubeProjectEntries[index].image}\r\n                                location={YoutubeProjectEntries[index].location}/>\r\n            </div>\r\n        </div>     \r\n    )\r\n}\r\n","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from '../Components/NavigationBar/NavigationBar'\r\nimport ProjectContainer from '../Components/ProjectContainer/ProjectContainer'\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nexport default function Youtube() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <ProjectContainer/>\r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\n// page imports\r\nimport Home from '../Body/Home';\r\nimport About from '../Body/About'\r\nimport SoftwareProjects from '../Body/SoftwareProjects';\r\nimport Youtube from '../Body/Youtube'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch> {/* The Switch decides which component to show based on the current URL.*/}\r\n        <Route exact path='/' component={Home}></Route>\r\n        <Route exact path='/about' component={About}></Route>\r\n        <Route exact path='/software' component={SoftwareProjects}></Route>\r\n        <Route exact path='/youtube' component={Youtube}></Route>\r\n      </Switch>\r\n    </BrowserRouter> \r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Master from './Pages/Main'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Master/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}