{"version":3,"sources":["LineGraph.js","Logic/InputDataProcessor.js","Logic/UserData.js","Logic/UserCollection.js","SelectionContainer.js","Components/UserDataInput.js","Components/UserDataRow.js","Components/DataContainer.js","WebsiteMain.js","index.js"],"names":["getCumulative","input","arr","cumulative","i","length","LineGraphChart","data","this","props","dates","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","options","maintainAspectRatio","Component","InputDataProcessor","entries","it","value","date","push","DataEntry","earliest","Date","earliest_int","Number","date_int","earliestDate","getEarliestDate","latestDate","getLatestDate","daysDifference","getDaysUntil","newDate","setDate","getDate","dateString","toISOString","substring","total","date1","date2","diff","getTime","Math","ceil","ExerciseEntry","distance","photo","DateEntry","exerciseEntries","index","splice","UserData","name","dateEntries","dateEntry","getDateEntry","getDistances","addExerciseEntry","removeEntry","setDistance","UserCollection","users","userNames","useStyles","makeStyles","theme","root","width","maxWidth","palette","background","paper","default","margin","spacing","section1","section3","SelectionContainer","classes","className","Grid","container","alignItems","item","xs","Typography","gutterBottom","variant","color","InputLabel","Select","style","onChange","event","processUserSelect","target","items","map","MenuItem","Divider","UserDataInput","TextField","type","defaultValue","activeDate","processDateChange","Button","maxHeight","minWidth","minHeight","onClick","addEntry","UserDataRow","useState","InputProps","endAdornment","InputAdornment","position","console","log","onKeyPress","key","confirmInput","common","white","sectionColumnRight","float","DataContainer","isNaN","user","updateData","setUserEntries","getDistancesOnDate","setActiveDate","userEntries","userCollection","WebsiteMain","setInput","setDates","userName","setUserName","getUserNames","activeUser","getUser","processor","d","j","addDataEntry","processorDates","getDates","processorInput","getAdditionOnDate","getDateLabel","LineGraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e544541c.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction getCumulative(input)\r\n{\r\n  let arr = [];\r\n  let cumulative = 0;\r\n  for(let i=0;i<input.length;i++)\r\n  {\r\n    cumulative += input[i];\r\n    arr[i] = cumulative;\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction generateData(input, dates)\r\n{\r\n  return { \r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: \"Total distance (km)\",\r\n        data: getCumulative(input),\r\n        fill: true,\r\n        lineTension: 0,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nclass LineGraphChart extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <Line \r\n              data={generateData(this.props.data, this.props.dates)}\r\n              options =   \r\n              {\r\n                {\r\n                  maintainAspectRatio:false\r\n                }\r\n              }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineGraphChart;","export default class InputDataProcessor\r\n{\r\n    constructor()\r\n    {\r\n        this.entries = [];\r\n        this.it = 0;\r\n    }\r\n\r\n    addDataEntry(value, date)\r\n    {\r\n        this.entries.push(new DataEntry(value,date));\r\n    }\r\n\r\n    getEarliestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int < earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n\r\n        return new Date(earliest);\r\n    }\r\n\r\n    getLatestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int > earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n        \r\n        return new Date(earliest);\r\n    }\r\n\r\n    getDates()\r\n    {\r\n        let arr = [];\r\n\r\n        let earliestDate = this.getEarliestDate();\r\n        let latestDate = this.getLatestDate();\r\n\r\n        let daysDifference = this.getDaysUntil(earliestDate, latestDate) + 3;\r\n\r\n        for(let i=0;i<daysDifference;i++)\r\n        {\r\n            let newDate = new Date(earliestDate);\r\n            newDate.setDate(newDate.getDate() + i - 1);\r\n\r\n            let dateString = newDate.toISOString().substring(0, 10);\r\n\r\n            arr.push(dateString);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    getAdditionOnDate(date)\r\n    {\r\n        let total = 0;\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {       \r\n            if(this.entries[i].date === date) total += this.entries[i].value;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getDateLabel(date)\r\n    {       \r\n        return date; \r\n\r\n        //this can be used to customize labels based on the input\r\n    }\r\n\r\n    getDaysUntil(date1, date2)\r\n    {\r\n        let diff = date2.getTime() - date1.getTime();\r\n        let days = Math.ceil(diff/(1000*3600*24));\r\n        return days;\r\n    }\r\n}\r\n\r\nclass DataEntry\r\n{\r\n    constructor(value, date)\r\n    {\r\n        this.value = value;\r\n        this.date = date;\r\n    }\r\n}\r\n\r\n","class ExerciseEntry\r\n{\r\n    constructor(distance, photo)\r\n    {\r\n        this.distance = distance;\r\n        this.photo = photo;\r\n    }\r\n}\r\n\r\nclass DateEntry\r\n{\r\n    constructor(date)\r\n    {\r\n        this.date = date;\r\n        this.exerciseEntries = [];\r\n    }\r\n\r\n    addExerciseEntry(distance, photo)\r\n    {\r\n        this.exerciseEntries.push(new ExerciseEntry(distance, photo));\r\n    }\r\n\r\n    setDistance(index, distance)\r\n    {\r\n        if(index < this.exerciseEntries.length)\r\n        {\r\n            this.exerciseEntries[index].distance = distance;\r\n        }\r\n    }\r\n\r\n    removeEntry(index)\r\n    {\r\n        if(index < this.exerciseEntries.length)\r\n        {\r\n            this.exerciseEntries.splice(index, 1);         \r\n        }\r\n    }\r\n\r\n    getDistances()\r\n    {\r\n        let arr = [];\r\n        for(let i=0;i<this.exerciseEntries.length;i++)\r\n        {\r\n            arr.push(this.exerciseEntries[i].distance);\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n\r\nexport default class UserData\r\n{\r\n    constructor(name)\r\n    {\r\n        this.name = name;\r\n\r\n        //initialize new array of ExerciseEntry structs\r\n        this.dateEntries = [];\r\n    }\r\n\r\n    getDistancesOnDate(date)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n        if(dateEntry!==null)\r\n        {\r\n            return dateEntry.getDistances();\r\n        }\r\n        \r\n        return [];\r\n    }\r\n\r\n    addEntry(date)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n\r\n        //Create a new unique date entry if it doesnt exist yet\r\n        if(dateEntry === null)\r\n        {\r\n            dateEntry = new DateEntry(date);\r\n            this.dateEntries.push(dateEntry);\r\n        }\r\n\r\n        dateEntry.addExerciseEntry(0, \"\");\r\n    }\r\n\r\n    removeEntry(date, index)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n\r\n        //Create a new unique date entry if it doesnt exist yet\r\n        if(dateEntry !== null)\r\n        {\r\n            dateEntry.removeEntry(index);\r\n        }\r\n    }\r\n\r\n    setDistance(date, index, distance)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n        if(dateEntry!==null)\r\n        {\r\n            return dateEntry.setDistance(index, distance);\r\n        }\r\n    }\r\n\r\n    getDateEntry(date)\r\n    {\r\n        for(let i=0;i<this.dateEntries.length;i++)\r\n        {\r\n            if(this.dateEntries[i].date === date) return this.dateEntries[i];\r\n        }\r\n        return null;\r\n    }\r\n}","import { useScrollTrigger } from '@material-ui/core';\r\nimport UserData from './UserData.js'\r\n\r\nexport default class UserCollection\r\n{\r\n    constructor()\r\n    {\r\n        this.users = \r\n        [\r\n            new UserData(\"Joris\"),\r\n            new UserData(\"Minyu\"),\r\n            new UserData(\"New User\")\r\n        ];\r\n    }\r\n\r\n    getUser(name)\r\n    {\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            if(this.users[i].name === name)\r\n            {\r\n                return this.users[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getUserNames()\r\n    {\r\n        const userNames = [];\r\n\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            userNames.push(this.users[i].name);\r\n        }\r\n        return userNames;\r\n    }\r\n}","import React from 'react';\r\n\r\n//material-ui imports\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(3, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n  \r\n  export default function SelectionContainer(props) {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.section1}>\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Typography gutterBottom variant=\"h4\">\r\n                Logging Tool \r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography color=\"textSecondary\" variant=\"body2\">\r\n            Select the active user\r\n          </Typography>\r\n\r\n          <div className={classes.default}>\r\n          <InputLabel>Select the active user</InputLabel>\r\n          </div>\r\n\r\n          <Select\r\n            style={{ width: 160 }}\r\n            onChange={(event) => {\r\n              props.processUserSelect(event.target.value);\r\n            }}\r\n          >\r\n            {\r\n              props.items.map((value, index) => \r\n              (\r\n                <MenuItem value={value}>{value}</MenuItem>\r\n              ))\r\n            }\r\n          </Select>\r\n        </div>\r\n        <Divider variant=\"middle\" />\r\n      </div>\r\n    );\r\n  }","import TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction UserDataInput(props)\r\n{\r\n  return(\r\n    <div className=\"DataInputStyle\">\r\n      <Typography color=\"textSecondary\" variant=\"body2\">\r\n        Add entries for the selected date\r\n      </Typography>\r\n\r\n      <TextField\r\n        type=\"date\"\r\n        defaultValue={props.activeDate}\r\n        onChange={event => \r\n        {\r\n          props.processDateChange(event.target.value);\r\n        }}\r\n      />\r\n      <Button \r\n        color=\"primary\" \r\n        style={{maxWidth: '100px', maxHeight: '30px', minWidth: '100px', minHeight: '30px'}}          \r\n        variant=\"contained\" \r\n        onClick={props.addEntry}>\r\n            Add\r\n        </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserDataInput","import React, {useState} from 'react'\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction UserDataRow(props)\r\n{\r\n  const [distance, setDistance] = useState(props.distance);\r\n\r\n  return(\r\n    <div className=\"DataEntryStyle\">\r\n        <TextField label=\"Distance\" \r\n          InputProps={{\r\n            endAdornment: <InputAdornment position=\"start\">km</InputAdornment>,\r\n          }}\r\n          value={distance}\r\n          onChange={event => \r\n          {\r\n            console.log(\"Setting the value to \" + event.target.value);\r\n            setDistance(event.target.value);\r\n          }}\r\n          onKeyPress={event => \r\n          {\r\n            if (event.key === 'Enter') {\r\n              props.confirmInput(props.index, distance)\r\n            }\r\n          }}\r\n        /> \r\n\r\n        <Button \r\n          style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}          \r\n          color=\"secondary\" \r\n          variant=\"contained\" \r\n          onClick={event => \r\n          {\r\n              props.removeEntry(props.index);\r\n          }}\r\n        >\r\n          X\r\n        </Button>\r\n    </div>     \r\n  )\r\n}\r\n\r\nexport default UserDataRow;","//material-ui imports\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport UserDataInput from './UserDataInput'\r\nimport UserDataRow from './UserDataRow'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 500,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n    sectionColumnRight: {\r\n      width: '50%',\r\n      float: 'right',\r\n      margin: theme.spacing(3, 2),\r\n      backgroundColor: 'lightGray',\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(2, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n\r\nexport default function DataContainer(props) {\r\n  const classes = useStyles();\r\n\r\n  function addEntry()\r\n  {\r\n    props.user.addEntry(props.activeDate);\r\n\r\n    //update the state variable\r\n    props.setUserEntries(props.user.getDistancesOnDate(props.activeDate));\r\n  }\r\n\r\n  function confirmInput(index, value)\r\n  {\r\n    let input = Number(value);\r\n    if(isNaN(input)) return;\r\n\r\n    props.user.setDistance(props.activeDate, index, input)\r\n\r\n    props.updateData();\r\n  }\r\n\r\n  function removeEntry(index)\r\n  {\r\n    props.user.removeEntry(props.activeDate, index);\r\n\r\n    props.setUserEntries(props.user.getDistancesOnDate(props.activeDate));\r\n\r\n    props.updateData();\r\n  }\r\n\r\n  function processDateChange(date)\r\n  {\r\n    props.setActiveDate(date);\r\n\r\n    //update the state variable\r\n    props.setUserEntries(props.user.getDistancesOnDate(date));\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.section1}>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          Entry overview for {props.user.name}:\r\n        </Typography>\r\n      </div>\r\n\r\n      <div className=\"AreaInputNew\">\r\n        <div className=\"UserEntriesContainer\">\r\n          <UserDataInput addEntry={addEntry} activeDate={props.activeDate} processDateChange={processDateChange}/> \r\n          \r\n          {\r\n          props.userEntries.length === 0 &&\r\n\r\n          <div className=\"DataEntryStyle\">\r\n            <Typography color='primary' variant=\"body2\">\r\n              No entries yet for {props.user.name} on {props.activeDate}\r\n            </Typography>\r\n          </div>\r\n        }\r\n          \r\n          {\r\n            props.userEntries.map((value, index) => \r\n            (\r\n              <UserDataRow \r\n                name={props.user.name} \r\n                confirmInput={confirmInput} \r\n                removeEntry={removeEntry}\r\n                distance={value} \r\n                index={index}\r\n              />\r\n            ))\r\n          }  \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import './Styling/WebsiteMain.css'\r\n\r\n//react imports\r\nimport { Component } from 'react';\r\nimport React, {useState} from 'react'\r\n\r\n//external imports\r\nimport LineGraphChart from './LineGraph'\r\nimport InputDataProcessor from './Logic/InputDataProcessor.js';\r\nimport UserCollection from './Logic/UserCollection.js'\r\n\r\n//test imports\r\nimport SelectionContainer from './SelectionContainer.js'\r\nimport DataContainer from './Components/DataContainer.js'\r\n\r\nlet userCollection = new UserCollection();\r\n\r\nclass AddEntry extends Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n\r\n    this.state =\r\n    {\r\n      textFieldValue: \"\",\r\n      textFieldDate: new Date().toISOString().substring(0, 10)\r\n    };\r\n  }\r\n\r\n  addValue()\r\n  {\r\n    this.props.processItem(this.state.textFieldValue, this.state.textFieldDate);   \r\n  }\r\n}\r\n\r\nfunction WebsiteMain() {\r\n  const [input, setInput] = useState([0]);\r\n  const [dates, setDates] = useState([\"\"]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [userEntries, setUserEntries] = useState([]);\r\n  const [activeDate, setActiveDate] = useState(new Date().toISOString().substring(0, 10));\r\n\r\n  function processUserSelection(userName)\r\n  {\r\n    //Update the user name\r\n    setUserName(userName);\r\n\r\n    //Update the entries associated with that user name\r\n    let activeUser = userCollection.getUser(userName);\r\n    if(activeUser!==null)\r\n    {\r\n      setUserEntries(activeUser.getDistancesOnDate(activeDate));\r\n    }\r\n  }\r\n\r\n  function updateData()\r\n  {\r\n    //Go through all users in the user collection\r\n\r\n    //For each user, create a combination package consisting of:\r\n    //- labels\r\n    //- cumulatives per date\r\n\r\n    //We need an object that handles all input + date combinations\r\n    //These combinations then need to be transformed into a set of labels and inputs for the graph\r\n    let processor = new InputDataProcessor();\r\n\r\n    for(let i=0;i<userCollection.users.length;i++)\r\n    {\r\n        let user = userCollection.users[i];\r\n        for(let d=0;d<user.dateEntries.length;d++)\r\n        {\r\n          let dateEntry = user.dateEntries[d];\r\n\r\n          let date = dateEntry.date;\r\n\r\n          for(let j=0;j<dateEntry.exerciseEntries.length;j++)\r\n          {\r\n              processor.addDataEntry(dateEntry.exerciseEntries[j].distance, date);\r\n          }\r\n        }\r\n    }\r\n\r\n    //create input list for graph\r\n    let processorDates = processor.getDates();\r\n    let processorInput = [];\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorInput[i] = processor.getAdditionOnDate(processorDates[i]);\r\n    }\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorDates[i] = processor.getDateLabel(processorDates[i]);\r\n    }\r\n\r\n    setInput(processorInput);\r\n    setDates(processorDates);\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    <div className=\"UserContainer\">\r\n      <div className=\"PersonEntry\">\r\n        <SelectionContainer items={userCollection.getUserNames()} processUserSelect={processUserSelection}/>\r\n      </div>\r\n      {\r\n        userName.length > 0 &&\r\n        <div>\r\n          <DataContainer \r\n            user={userCollection.getUser(userName)}\r\n            userEntries={userEntries}\r\n            setUserEntries={setUserEntries}\r\n            activeDate={activeDate}\r\n            setActiveDate={setActiveDate}\r\n            updateData={updateData}\r\n          />\r\n        </div>      \r\n      }\r\n    </div>\r\n    <div className=\"GraphContainer\">\r\n      <LineGraphChart data={input} dates={dates}/>\r\n    </div>     \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default WebsiteMain;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styling/index.css';\r\nimport WebsiteMain from './WebsiteMain';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WebsiteMain />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}