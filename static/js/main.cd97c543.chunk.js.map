{"version":3,"sources":["LineGraph.js","Logic/InputDataProcessor.js","Logic/UserData.js","Database/FireBaseSetup.js","Logic/UserEntryDB.js","Logic/DBStorage.js","Logic/UserCollection.js","SelectionContainer.js","Components/UserDataInput.js","Components/UserDataRow.js","Components/DataContainer.js","WebsiteMain.js","index.js"],"names":["getCumulative","input","arr","cumulative","i","length","LineGraphChart","data","this","props","dates","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","options","maintainAspectRatio","Component","InputDataProcessor","entries","it","value","date","push","DataEntry","earliest","Date","earliest_int","Number","date_int","earliestDate","getEarliestDate","latestDate","getLatestDate","daysDifference","getDaysUntil","newDate","setDate","getDate","dateString","toISOString","substring","total","date1","date2","diff","getTime","Math","ceil","UserData","name","dateEntries","storage","dateEntry","getDateEntry","getDistances","create","addExerciseEntry","index","removeEntry","distance","setDistance","update","firebase","initializeApp","databaseURL","database","UserEntryDB","callback","dataCache","ref","on","snapshot","triggerValueUpdate","fetchedData","val","console","log","exists","photo","userDateInput","get","then","set","catch","error","splice","DBStorage","UserCollection","users","initStorage","userNames","useStyles","makeStyles","theme","root","width","maxWidth","palette","background","paper","default","margin","spacing","section1","section3","SelectionContainer","classes","className","InputLabel","Select","style","onChange","event","processUserSelect","target","items","map","MenuItem","Divider","variant","UserDataInput","Typography","color","Grid","container","alignItems","item","xs","TextField","type","defaultValue","activeDate","processDateChange","Button","maxHeight","minWidth","minHeight","onClick","addEntry","UserDataRow","useState","InputProps","endAdornment","InputAdornment","position","confirmInput","common","white","sectionColumnRight","float","DataContainer","user","isNaN","modifyEntry","modifyDate","userEntries","userCollection","WebsiteMain","setInput","setDates","userName","setUserName","setUserEntries","setActiveDate","init","activeUser","getUser","getDistancesOnDate","processor","d","distances","j","addDataEntry","processorDates","getDates","processorInput","getAdditionOnDate","getDateLabel","getUserNames","LineGraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd97c543.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction getCumulative(input)\r\n{\r\n  let arr = [];\r\n  let cumulative = 0;\r\n  for(let i=0;i<input.length;i++)\r\n  {\r\n    cumulative += input[i];\r\n    arr[i] = cumulative;\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction generateData(input, dates)\r\n{\r\n  return { \r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: \"Total distance (km)\",\r\n        data: getCumulative(input),\r\n        fill: true,\r\n        lineTension: 0,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nclass LineGraphChart extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <Line \r\n              data={generateData(this.props.data, this.props.dates)}\r\n              options =   \r\n              {\r\n                {\r\n                  maintainAspectRatio:false\r\n                }\r\n              }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineGraphChart;","export default class InputDataProcessor\r\n{\r\n    constructor()\r\n    {\r\n        this.entries = [];\r\n        this.it = 0;\r\n    }\r\n\r\n    addDataEntry(value, date)\r\n    {\r\n        this.entries.push(new DataEntry(value,date));\r\n    }\r\n\r\n    getEarliestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int < earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n\r\n        return new Date(earliest);\r\n    }\r\n\r\n    getLatestDate()\r\n    {\r\n        let earliest = new Date();\r\n        let earliest_int = Number(earliest);\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {\r\n            let date_int = Number(new Date(this.entries[i].date));\r\n            if(date_int > earliest_int) \r\n            {\r\n                earliest_int = date_int;\r\n                earliest = this.entries[i].date;\r\n            }\r\n        }\r\n        \r\n        return new Date(earliest);\r\n    }\r\n\r\n    getDates()\r\n    {\r\n        let arr = [];\r\n\r\n        let earliestDate = this.getEarliestDate();\r\n        let latestDate = this.getLatestDate();\r\n\r\n        let daysDifference = this.getDaysUntil(earliestDate, latestDate) + 3;\r\n\r\n        for(let i=0;i<daysDifference;i++)\r\n        {\r\n            let newDate = new Date(earliestDate);\r\n            newDate.setDate(newDate.getDate() + i - 1);\r\n\r\n            let dateString = newDate.toISOString().substring(0, 10);\r\n\r\n            arr.push(dateString);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    getAdditionOnDate(date)\r\n    {\r\n        let total = 0;\r\n\r\n        for(let i=0;i<this.entries.length;i++)\r\n        {       \r\n            if(this.entries[i].date === date) total += this.entries[i].value;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getDateLabel(date)\r\n    {       \r\n        return date; \r\n\r\n        //this can be used to customize labels based on the input\r\n    }\r\n\r\n    getDaysUntil(date1, date2)\r\n    {\r\n        let diff = date2.getTime() - date1.getTime();\r\n        let days = Math.ceil(diff/(1000*3600*24));\r\n        return days;\r\n    }\r\n}\r\n\r\nclass DataEntry\r\n{\r\n    constructor(value, date)\r\n    {\r\n        this.value = value;\r\n        this.date = date;\r\n    }\r\n}\r\n\r\n","export default class UserData\r\n{\r\n    constructor(name)\r\n    {\r\n        this.name = name;\r\n\r\n        //initialize new array of ExerciseEntry structs\r\n        this.dateEntries = [];\r\n    }\r\n\r\n    initStorage(storage)\r\n    {\r\n        this.storage = storage;\r\n    }\r\n\r\n    getDistancesOnDate(date)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n        if(dateEntry!==null)\r\n        {\r\n            return dateEntry.getDistances();\r\n        }\r\n        \r\n        return [];\r\n    }\r\n\r\n    addEntry(date)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n\r\n        //Create a new unique date entry if it doesnt exist yet\r\n        if(dateEntry === null)\r\n        {     \r\n            dateEntry = this.storage.create(date, this.name);\r\n            this.dateEntries.push(dateEntry);\r\n        }\r\n\r\n        dateEntry.addExerciseEntry(0, \"\");\r\n    }\r\n\r\n    removeEntry(date, index)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n\r\n        //Create a new unique date entry if it doesnt exist yet\r\n        if(dateEntry !== null)\r\n        {\r\n            dateEntry.removeEntry(index);\r\n        }\r\n    }\r\n\r\n    setDistance(date, index, distance)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n        if(dateEntry!==null)\r\n        {\r\n            return dateEntry.setDistance(index, distance);\r\n        }\r\n    }\r\n\r\n    update(date)\r\n    {\r\n        let dateEntry = this.getDateEntry(date);\r\n\r\n        if(dateEntry!==null)\r\n        {\r\n            dateEntry.update();\r\n        }\r\n    }\r\n\r\n    getDateEntry(date)\r\n    {\r\n        for(let i=0;i<this.dateEntries.length;i++)\r\n        {\r\n            if(this.dateEntries[i].date === date)\r\n            {\r\n                return this.dateEntries[i];\r\n            } \r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import firebase from 'firebase'\r\nimport \"firebase/database\"\r\n\r\n// Set the configuration for your app\r\n  var config = {\r\n    databaseURL: \"https://joriswebsitefirebase-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export {firebase};","//data base testing\r\nimport {firebase} from '../Database/FireBaseSetup.js'\r\nlet database = firebase.database();\r\n\r\nexport default class UserEntryDB\r\n{\r\n    constructor(date, name, callback)\r\n    {\r\n        this.date = date;\r\n        this.name = name;\r\n        this.dataCache = [];\r\n        this.callback = callback;\r\n\r\n        let userDateInput = database.ref(\"users/\" + this.name + \"/\" + this.date);\r\n        userDateInput.on('value', (snapshot) => {\r\n            this.triggerValueUpdate(snapshot);\r\n        });\r\n    }\r\n\r\n    triggerValueUpdate(snapshot)\r\n    {\r\n        let fetchedData = snapshot.val();\r\n        console.log(\"Getting data: \" + fetchedData);\r\n\r\n        if(snapshot.exists())\r\n        {\r\n            this.dataCache = fetchedData;\r\n        }\r\n        else\r\n        {\r\n            this.dataCache = [];\r\n        }\r\n\r\n        this.callback();\r\n    }\r\n\r\n    addExerciseEntry(distance, photo)\r\n    {\r\n        let userDateInput = database.ref(\"users/\" + this.name + \"/\" + this.date);\r\n        \r\n        userDateInput.get().then(function(snapshot) {\r\n\r\n            //Emtpy array in case no entry exists yet\r\n            let data = [];\r\n\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              data = snapshot.val();\r\n            }\r\n\r\n            //Add the item to the collection\r\n            data.push(distance);\r\n            \r\n            //Update the database value\r\n            userDateInput.set(data);\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    setDistance(index, distance)\r\n    {        \r\n        let userDateInput = database.ref(\"users/\" + this.name + \"/\" + this.date);\r\n\r\n        userDateInput.get().then(function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              let data = snapshot.val();\r\n\r\n              if(index < data.length)\r\n              {\r\n                  data[index] = distance;\r\n              }\r\n\r\n              userDateInput.set(data);\r\n            }\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    removeEntry(index)\r\n    {\r\n        console.log(\"Removing...\");\r\n        let userDateInput = database.ref(\"users/\" + this.name + \"/\" + this.date);\r\n\r\n        userDateInput.get().then(function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              let data = snapshot.val();\r\n\r\n              if(index < data.length)\r\n              {\r\n                  data.splice(index, 1);\r\n              }\r\n\r\n              userDateInput.set(data);\r\n            }\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    update()\r\n    {\r\n      console.log(\"updating\");\r\n        let userDateInput = database.ref(\"users/\" + this.name + \"/\" + this.date);\r\n        \r\n        userDateInput.get().then(function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              //Store cache with new data\r\n              let data = snapshot.val();\r\n\r\n              //Trigger event by manually setting the same data one more time\r\n              userDateInput.set(data);\r\n            }\r\n          }).catch(function(error) {\r\n            console.error(error);\r\n          });\r\n    }\r\n\r\n    getDistances()\r\n    {\r\n        return this.dataCache;\r\n    }\r\n}","import UserEntryDB from './UserEntryDB'\r\n\r\nexport default class DBStorage\r\n{\r\n    constructor(callback)\r\n    {\r\n        this.callback = callback;\r\n    }\r\n\r\n    create(date, name)\r\n    {\r\n        return new UserEntryDB(date, name, this.callback);\r\n    }\r\n}","import { useScrollTrigger } from '@material-ui/core';\r\nimport UserData from './UserData.js'\r\n\r\n//linking data storage\r\n//local\r\nimport LocalStorage from './LocalStorage.js'\r\n//database\r\nimport DBStorage from './DBStorage.js'\r\n\r\nexport default class UserCollection\r\n{\r\n    constructor(callback)\r\n    {\r\n        this.users = \r\n        [\r\n            new UserData(\"Joris\"),\r\n            new UserData(\"Minyu\"),\r\n            new UserData(\"New User\")\r\n        ]; \r\n    }\r\n\r\n    init(callback)\r\n    {\r\n        const storage = new DBStorage(callback);\r\n        //const storage = new LocalStorage(callback);\r\n\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            this.users[i].initStorage(storage);\r\n        }\r\n    }\r\n\r\n    getUser(name)\r\n    {\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            if(this.users[i].name === name)\r\n            {\r\n                return this.users[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getUserNames()\r\n    {\r\n        const userNames = [];\r\n\r\n        for(let i=0;i<this.users.length;i++)\r\n        {\r\n            userNames.push(this.users[i].name);\r\n        }\r\n        return userNames;\r\n    }\r\n}","import React from 'react';\r\n\r\n//material-ui imports\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(3, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n  \r\n  export default function SelectionContainer(props) {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.section1}>\r\n          <div className={classes.default}>\r\n          <InputLabel>Select the active user</InputLabel>\r\n          </div>\r\n\r\n          <Select\r\n            style={{ width: 160 }}\r\n            onChange={(event) => {\r\n              props.processUserSelect(event.target.value);\r\n            }}\r\n          >\r\n            {\r\n              props.items.map((value, index) => \r\n              (\r\n                <MenuItem value={value}>{value}</MenuItem>\r\n              ))\r\n            }\r\n          </Select>\r\n        </div>\r\n        <Divider variant=\"middle\" />\r\n      </div>\r\n    );\r\n  }","import TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction UserDataInput(props)\r\n{\r\n  return(\r\n    <div className=\"DataInputStyle\">\r\n      <Typography color=\"textSecondary\" variant=\"body2\">\r\n        Add entries for the selected date\r\n      </Typography>\r\n\r\n      <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n          <TextField\r\n        type=\"date\"\r\n        defaultValue={props.activeDate}\r\n        onChange={event => \r\n        {\r\n          props.processDateChange(event.target.value);\r\n        }}\r\n      /> \r\n          </Grid>\r\n          <Grid item>\r\n          <Button \r\n        color=\"primary\" \r\n        style={{maxWidth: '100px', maxHeight: '30px', minWidth: '100px', minHeight: '30px'}}          \r\n        variant=\"contained\" \r\n        onClick={props.addEntry}>\r\n            Add\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n      \r\n     \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserDataInput","import React, {useState} from 'react'\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction UserDataRow(props)\r\n{\r\n  const [distance, setDistance] = useState(props.distance);\r\n\r\n  return(\r\n    <div className=\"DataEntryStyle\">\r\n\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n          <TextField label=\"Distance\" \r\n          InputProps={{\r\n            endAdornment: <InputAdornment position=\"start\">km</InputAdornment>,\r\n          }}\r\n          value={distance}\r\n          onChange={event => \r\n          {\r\n            setDistance(event.target.value);\r\n\r\n            props.confirmInput(props.index, event.target.value)\r\n          }}\r\n        /> \r\n          </Grid>\r\n          <Grid item>\r\n          <Button \r\n          style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}          \r\n          color=\"secondary\" \r\n          variant=\"contained\" \r\n          onClick={event => \r\n          {\r\n              props.removeEntry(props.index);\r\n          }}\r\n        >\r\n          X\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n    </div>     \r\n  )\r\n}\r\n\r\nexport default UserDataRow;","//material-ui imports\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport UserDataInput from './UserDataInput'\r\nimport UserDataRow from './UserDataRow'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 500,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    default: {\r\n      margin: theme.spacing(3, 0, 1, 0),\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n    sectionColumnRight: {\r\n      width: '50%',\r\n      float: 'right',\r\n      margin: theme.spacing(3, 2),\r\n      backgroundColor: 'lightGray',\r\n    },\r\n    section1: {\r\n      margin: theme.spacing(2, 2),\r\n    },\r\n    section3: {\r\n      margin: theme.spacing(3, 1, 1),\r\n    },\r\n  }));\r\n\r\nexport default function DataContainer(props) {\r\n  const classes = useStyles();\r\n\r\n  function addEntry()\r\n  {\r\n    props.addEntry(props.user);\r\n  }\r\n\r\n  function removeEntry(index)\r\n  {\r\n    props.removeEntry(props.user, index);  \r\n  }\r\n\r\n  function confirmInput(index, value)\r\n  {\r\n    let input = Number(value);\r\n    if(isNaN(input)) return;\r\n\r\n    props.modifyEntry(props.user, index, input);\r\n  }\r\n\r\n  function processDateChange(date)\r\n  {\r\n    props.modifyDate(props.user, date);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.section1}>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          Entry overview for {props.user.name}:\r\n        </Typography>\r\n      </div>\r\n\r\n      <div className=\"AreaInputNew\">\r\n        <div className=\"UserEntriesContainer\">\r\n          <UserDataInput addEntry={addEntry} activeDate={props.activeDate} processDateChange={processDateChange}/> \r\n          \r\n          {\r\n          props.userEntries.length === 0 &&\r\n\r\n          <div className=\"DataEntryStyle\">\r\n            <Typography color='primary' variant=\"body2\">\r\n              No entries yet for {props.user.name} on {props.activeDate}\r\n            </Typography>\r\n          </div>\r\n        }\r\n          \r\n          {\r\n            props.userEntries.map((value, index) => \r\n            (\r\n              <UserDataRow \r\n                name={props.user.name} \r\n                confirmInput={confirmInput} \r\n                removeEntry={removeEntry}\r\n                distance={value} \r\n                index={index}\r\n              />\r\n            ))\r\n          }  \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import './Styling/WebsiteMain.css'\r\n\r\n//react imports\r\nimport React, {useState} from 'react'\r\n\r\n//external imports\r\nimport LineGraphChart from './LineGraph'\r\nimport InputDataProcessor from './Logic/InputDataProcessor.js';\r\nimport UserCollection from './Logic/UserCollection.js'\r\n\r\n//test imports\r\nimport SelectionContainer from './SelectionContainer.js'\r\nimport DataContainer from './Components/DataContainer.js'\r\n\r\nlet userCollection = new UserCollection();\r\n\r\nfunction WebsiteMain() {\r\n  const [input, setInput] = useState([0]);\r\n  const [dates, setDates] = useState([\"\"]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [userEntries, setUserEntries] = useState([]);\r\n  const [activeDate, setActiveDate] = useState(new Date().toISOString().substring(0, 10));\r\n\r\n  userCollection.init(updateData);\r\n\r\n  function processUserSelection(userName)\r\n  {\r\n    //Update the user name\r\n    setUserName(userName);\r\n\r\n    //Update the entries associated with that user name\r\n    let activeUser = userCollection.getUser(userName);\r\n    if(activeUser!==null)\r\n    {\r\n      activeUser.update(activeDate);\r\n    }\r\n  }\r\n\r\n  function updateData()\r\n  {\r\n    console.log(\"Updating the data\");\r\n\r\n    //TODO: refactor into maybe a different callback\r\n    let activeUser = userCollection.getUser(userName);\r\n    if(activeUser!==null)\r\n    {\r\n      setUserEntries(activeUser.getDistancesOnDate(activeDate));\r\n    }\r\n\r\n    //Go through all users in the user collection\r\n\r\n    //For each user, create a combination package consisting of:\r\n    //- labels\r\n    //- cumulatives per date\r\n\r\n    //We need an object that handles all input + date combinations\r\n    //These combinations then need to be transformed into a set of labels and inputs for the graph\r\n    let processor = new InputDataProcessor();\r\n\r\n    for(let i=0;i<userCollection.users.length;i++)\r\n    {\r\n        let user = userCollection.users[i];\r\n        for(let d=0;d<user.dateEntries.length;d++)\r\n        {\r\n          let dateEntry = user.dateEntries[d];\r\n          let date = dateEntry.date;\r\n          let distances = dateEntry.getDistances();\r\n\r\n          for(let j=0;j<distances.length;j++)\r\n          {\r\n              processor.addDataEntry(distances[j], date);\r\n          }\r\n        }\r\n    }\r\n\r\n    //create input list for graph\r\n    let processorDates = processor.getDates();\r\n    let processorInput = [];\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorInput[i] = processor.getAdditionOnDate(processorDates[i]);\r\n    }\r\n\r\n    for(let i=0;i<processorDates.length;i++)\r\n    {\r\n      processorDates[i] = processor.getDateLabel(processorDates[i]);\r\n    }\r\n\r\n    setInput(processorInput);\r\n    setDates(processorDates);\r\n  }\r\n\r\n  function addEntry(user)\r\n  {\r\n    user.addEntry(activeDate);\r\n  }\r\n\r\n  function removeEntry(user, index)\r\n  {\r\n    user.removeEntry(activeDate, index);\r\n  }\r\n\r\n  function modifyEntry(user, index, value)\r\n  {\r\n    user.setDistance(activeDate, index, value)\r\n  }\r\n\r\n  function modifyDate(user, date)\r\n  {\r\n    setActiveDate(date);\r\n\r\n    user.update(date);\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    <div className=\"UserContainer\">\r\n      <div className=\"PersonEntry\">\r\n        <SelectionContainer items={userCollection.getUserNames()} processUserSelect={processUserSelection}/>\r\n      </div>\r\n      {\r\n        userName.length > 0 &&\r\n        <div>\r\n          <DataContainer \r\n            user={userCollection.getUser(userName)}\r\n            userEntries={userEntries}\r\n            activeDate={activeDate}\r\n            removeEntry={removeEntry}\r\n            addEntry={addEntry}\r\n            modifyEntry={modifyEntry}\r\n            modifyDate={modifyDate}\r\n          />\r\n        </div>      \r\n      }\r\n    </div>\r\n    <div className=\"GraphContainer\">\r\n      <LineGraphChart data={input} dates={dates}/>\r\n    </div>     \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default WebsiteMain;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styling/index.css';\r\nimport WebsiteMain from './WebsiteMain';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WebsiteMain />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}