{"version":3,"sources":["Components/NavigationBar/NavigationBar.tsx","Components/Footer/Footer.tsx","Body/Home.tsx","Components/Toolbar/ToolbarItem.tsx","Components/Toolbar/ToolbarItemGroup.tsx","Components/Toolbar/Toolbar.tsx","Components/GridNode/GridNode.tsx","Components/NavigationGrid/NavigationGrid.tsx","Logic/Pathfinding/Grid.tsx","Logic/Pathfinding/Pathfinding.tsx","Logic/Pathfinding/PathfindingMethods/Astar.tsx","Logic/Pathfinding/PathfindingMethods/BFS.tsx","Logic/Pathfinding/Action.tsx","Logic/Pathfinding/Animation.tsx","Logic/Pathfinding/GridModel.tsx","Components/GridProject/GridProject.tsx","Body/About.tsx","Components/ProjectList/ProjectList.tsx","Logic/ProjectInformation/ProjectData.tsx","Body/SoftwareProjects.tsx","Components/Dropdown/DropdownItem/DropdownItem.tsx","Components/Dropdown/DropdownHeader/DropdownHeader.tsx","Components/Dropdown/Dropdown.tsx","Components/SheetDisplayer/SheetDisplayer.tsx","Components/YoutubeEmbed/YoutubeEmbed.tsx","Components/ProjectContainer/ProjectContainerItem/ProjectContainerItem.tsx","Logic/ProjectInformation/YoutubeProjects.tsx","Components/ProjectContainer/ProjectContainer.tsx","Body/Youtube.tsx","Body/Project_Pathfinding.tsx","Body/Project_Chess.tsx","Pages/Main.js","index.js"],"names":["menuItems","title","url","Navigationbar","useState","open","setOpen","className","map","item","index","href","onClick","isOpen","style","getStyle","Footer","Home","id","ToolbarItem","props","selected","setIndex","name","ToolbarItemGroup","activeIndex","setActiveIndex","getIsSelected","names","ToolbarItemButton","ToolbarItemInput","entries","defaultIndex","onIndexChanged","this","Toolbar","itemGroups","itemButtons","Checkbox","onChange","event","checked","onCheckedChanged","color","GRID_STATUS","GridNode","walkable","status","DEFAULT","START","TARGET","VISITED","PATH","getCellStyle","onMouseDown","processMouseClick","x","y","onMouseEnter","processMouseEnter","isMouseDown","NavigationGrid","gridModel","grid","getTiles","tiles","setTiles","handleMouseDown","processAction","handleMouseEnter","getStatus","start","target","i","path","length","visitedNodes","attachObserver","row","xIndex","yIndex","document","body","onmousedown","onmouseup","Grid","xSize","ySize","initializeTiles","j","gridNode","push","exceptionCoordinates","containsCoordinate","Math","random","coordinate","neighbors","isValidAndWalkable","slice","coordinates","isValidTileCoordinate","PathfindingTile","link","visited","IPathfindable","collection","activeNode","undefined","reverse","PathfindingAStartTile","fScore","Infinity","gScore","isInOpen","isInClosed","AStar","abs","openSet","lowestIndex","lowestFScore","closedSet","referenceTiles","Array","calculateHeuristic","activeNodeIndex","getLowestFScoreIndex","splice","constructPath","getNeighboringTiles","activeGScore","neighbor","neighborGScore","neighborFScore","data","process","BFS","queue","shift","IAction","DefaultAction","WalkableAction","callback","setWalkable","StartAction","set","setStart","TargetAction","setTarget","IAnimator","InstantAnimator","displayPath","PathAndVisitedNodesAnimator","ANIMATION_STEP_TIMER","timers","pathCopy","visitedNodesCopy","animationCounter","collections","original","clone","pair","setTimeout","clearTimeout","Coordinate","GridModel","pathTypes","activePathIndex","activeAction","activeAnimation","observers","calculateOnChange","processChange","enableAnimation","stop","action","clear","exceptions","randomize","getTile","calculatePath","animate","notifyObservers","toggleWalkable","observer","includes","forEach","GridProject","inputToggleItems","inputButtonItems","setPathfindingIndex","generateToolbarItemInput_ActionTypes","setActionIndex","generateToolbarItemInput_SingleActions","clearGrid","randomizeGrid","enabled","setEnableAnimation","About","ProjectList","description","src","image","ProjectDataEntries","SoftwareProjects","DropdownItem","DropdownHeader","Dropdown","getSelectedStatus","class","SheetDisplayer","alt","YoutubeEmbed","frameBorder","allow","allowFullScreen","ProjectContainerItem","entry","location","download","YoutubeProjectEntries","ProjectContainer","Youtube","Project_Pathfinding","Project_Chess","Main","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28542fae.chunk.js","sourcesContent":["//styling imports\r\nimport { useState } from \"react\"\r\nimport \"./NavigationBar.css\"\r\n\r\ninterface NavigationMenuItem\r\n{\r\n    title:string;\r\n    url:string;\r\n}\r\n\r\nconst menuItems: Array<NavigationMenuItem> =\r\n[\r\n    {title: \"Home\", url: \"/\"},\r\n    {title: \"About\", url: \"/about\"},\r\n    {title: \"Software Projects\", url: \"/software\"},\r\n    {title: \"YouTube\", url: \"/youtube\"},\r\n]\r\n\r\nexport default function Navigationbar()\r\n{\r\n    const [open, setOpen] = useState(false);\r\n\r\n    function getStyle(isOpen:boolean)\r\n    {\r\n        let style = \"nav-dropdown\";\r\n\r\n        if(isOpen)\r\n        {\r\n            style += \" nav-dropdown-open\";\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className=\"nav\">\r\n            <div className=\"nav-left\">\r\n                <div className=\"nav-title\">\r\n                    Joris van Rheden\r\n                </div>\r\n            </div>\r\n            <div className=\"nav-right\">\r\n                <ul className=\"nav-menu\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        menuItems.map((item:NavigationMenuItem, index) => \r\n                        (\r\n                            <li key={index}>\r\n                                <a className=\"nav-item\" href={item.url}>\r\n                                    {item.title}\r\n                                </a>\r\n                            </li>                  \r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>    \r\n\r\n            <div className=\"hamburger\" \r\n                 onClick={()=>\r\n                 {\r\n                     setOpen(!open);\r\n                 }}\r\n            >\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n            </div>   \r\n\r\n            <div className={getStyle(open)}>\r\n                {\r\n                    menuItems.map((item:NavigationMenuItem, index) => \r\n                    (\r\n                        <a className=\"nav-dropdown-item\" href={item.url}>\r\n                            {item.title}\r\n                        </a>                \r\n                    ))\r\n                }        \r\n            </div>\r\n        </div>    \r\n    )\r\n}","import \"./Footer.css\"\r\n\r\nexport default function Footer()\r\n{\r\n    return(\r\n        <div className=\"footer-body\">\r\n            Joris van Rheden - 2021\r\n        </div>\r\n    )\r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from '../Components/NavigationBar/NavigationBar'\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">Main</div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import \"../../Components/Toolbar/Toolbar\"\r\n\r\ninterface Props\r\n{\r\n    name:string;\r\n    index:number;\r\n    selected:boolean;\r\n    \r\n    setIndex:(index:number) => void;\r\n}\r\n\r\nexport function ToolbarItem(props:Props)\r\n{\r\n    function getStyle()\r\n    {\r\n        let style = \"toolbar-item \";\r\n        if(props.selected)\r\n        {\r\n            style += \"toolbar-item-selected\";\r\n        }\r\n        else\r\n        {\r\n            style += \"toolbar-item-idle\";\r\n        }\r\n        \r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className={getStyle()}\r\n             onClick={()=>props.setIndex(props.index)}\r\n        >\r\n            <div className=\"toolbar-item-text\"> \r\n                {props.name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./Toolbar\"\r\n\r\nimport { useState } from \"react\";\r\nimport { ToolbarItem } from \"./ToolbarItem\"\r\n\r\ninterface Props\r\n{\r\n    title:string;\r\n    names:string[];\r\n    activeIndex:number;\r\n\r\n    setIndex:(index:number) => void;\r\n}\r\n\r\nexport function ToolbarItemGroup(props:Props)\r\n{\r\n    let [activeIndex, setActiveIndex] = useState(props.activeIndex);\r\n\r\n    function getIsSelected(index:number, activeIndex:number)\r\n    {\r\n        return index===activeIndex;\r\n    }\r\n\r\n    function setIndex(index:number)\r\n    {\r\n        setActiveIndex(index);\r\n        props.setIndex(index);\r\n    }\r\n\r\n    return(\r\n        <div className=\"toolbar-item-body\">\r\n            <div id=\"toolbar-items\">\r\n                <div className=\"toolbar-item-group\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        props.names.map((name:string, index) => \r\n                        (\r\n                            <ToolbarItem name={name} \r\n                                        selected={getIsSelected(index, activeIndex)} \r\n                                        index={index}\r\n                                        setIndex={setIndex}\r\n                            />              \r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>     \r\n    )\r\n}\r\n\r\nexport function ToolbarItemButton(props:Props)\r\n{\r\n    return(\r\n        <div className=\"toolbar-item-body\">\r\n            <div id=\"toolbar-items\">\r\n                <div className=\"toolbar-item-group\">\r\n                    {/* using curly braces for scripting in a div element */}\r\n                    {\r\n                        props.names.map((name:string, index) => \r\n                        (\r\n                            <ToolbarItem name={name} \r\n                                        selected={false} \r\n                                        index={index}\r\n                                        setIndex={props.setIndex}\r\n                            />              \r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import { Checkbox } from \"@material-ui/core\";\r\nimport \"./Toolbar.css\"\r\n\r\nimport { ToolbarItemButton, ToolbarItemGroup } from \"./ToolbarItemGroup\"\r\n\r\nexport class ToolbarItemInput\r\n{\r\n    title:string;\r\n    entries:string[];\r\n    defaultIndex:number;\r\n\r\n    onIndexChanged:(index:number)=>void;\r\n\r\n    constructor(title:string, entries:string[], defaultIndex:number, onIndexChanged:(index:number)=>void)\r\n    {\r\n        this.title = title;\r\n        this.entries = entries;\r\n        this.defaultIndex = defaultIndex;\r\n\r\n        this.onIndexChanged = onIndexChanged;\r\n    } \r\n}\r\n\r\ninterface Props\r\n{\r\n    itemGroups:ToolbarItemInput[];\r\n    itemButtons:ToolbarItemInput[];\r\n\r\n    onCheckedChanged(checked:boolean):void;\r\n}\r\n\r\nexport default function Toolbar(props:Props)\r\n{\r\n    function onChecked(event: React.ChangeEvent<HTMLInputElement>, checked: boolean):void\r\n    {\r\n        props.onCheckedChanged(checked);\r\n    }\r\n\r\n    return(\r\n        <div className=\"toolbar-body\">\r\n            {\r\n                props.itemGroups.map((item:ToolbarItemInput, index) => \r\n                (                    \r\n                    <ToolbarItemGroup \r\n                        title = {item.title}\r\n                        names={item.entries}\r\n                        activeIndex={item.defaultIndex}\r\n                        setIndex={item.onIndexChanged}\r\n                    /> \r\n                ))\r\n            }         \r\n            {\r\n                props.itemButtons.map((item:ToolbarItemInput, index) => \r\n                (                    \r\n                    <ToolbarItemButton \r\n                        title = {item.title}\r\n                        names={item.entries}\r\n                        activeIndex={item.defaultIndex}\r\n                        setIndex={item.onIndexChanged}\r\n                    /> \r\n                ))\r\n            }\r\n\r\n            <div className=\"checkbox-body\">\r\n                <Checkbox\r\n                    onChange={onChecked}\r\n                    color=\"primary\"/\r\n                >\r\n                <div className=\"checkbox-text\">Animate</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import \"../GridNode/GridNode.css\"\r\n\r\ninterface Props\r\n{\r\n    x:number;\r\n    y:number;\r\n\r\n    walkable:boolean;\r\n    status:number;\r\n\r\n    processMouseClick:(x:number, y:number) => void;\r\n    processMouseEnter:(x:number, y:number) => void;\r\n}\r\n\r\nexport enum GRID_STATUS\r\n{\r\n    DEFAULT = 0,\r\n    START = 1,\r\n    TARGET = 2, \r\n    VISITED = 3, \r\n    PATH = 4\r\n}\r\n\r\nexport default function GridNode(props:Props)\r\n{   \r\n    function getCellStyle() {\r\n        let style = \"cell \";\r\n\r\n        if(!props.walkable)\r\n        {\r\n            style += \"dark \";\r\n        }\r\n        else\r\n        {\r\n            switch(props.status)\r\n            {\r\n                case GRID_STATUS.DEFAULT:\r\n                    style+=\"light \";\r\n                    break;\r\n                case GRID_STATUS.START:\r\n                    style+=\"start \";\r\n                    break;\r\n                case GRID_STATUS.TARGET:\r\n                    style+=\"target \";\r\n                    break;\r\n                case GRID_STATUS.VISITED:\r\n                    style+=\"visited \";\r\n                    break;\r\n                case GRID_STATUS.PATH:\r\n                    style+=\"path \";\r\n                    break;\r\n                default:\r\n                    style+=\"light \";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={getCellStyle()}\r\n\r\n            onMouseDown={()=>props.processMouseClick(props.x, props.y)}\r\n            onMouseEnter={()=>props.processMouseEnter(props.x, props.y)}\r\n        >\r\n        </div>\r\n    )\r\n}","import \"../NavigationGrid/NavigationGrid.css\";\r\n\r\nimport { useState } from \"react\";\r\n\r\n//Logic imports\r\nimport GridNode, {GRID_STATUS} from \"../GridNode/GridNode\";\r\nimport { GridModel } from \"../../Logic/Pathfinding/GridModel\";\r\n\r\ninterface Props\r\n{\r\n  gridModel:GridModel;\r\n}\r\n\r\nlet isMouseDown = false;\r\n\r\ndocument.body.onmousedown = function() { \r\n  isMouseDown = true;\r\n}\r\ndocument.body.onmouseup = function() { \r\n  isMouseDown = false;\r\n}\r\n\r\nexport default function NavigationGrid(props:Props) {\r\n  const [tiles, setTiles] = useState(props.gridModel.grid.getTiles());\r\n  \r\n  props.gridModel.attachObserver(setTiles);\r\n\r\n  function handleMouseDown(x:number, y:number)\r\n  {\r\n    props.gridModel.processAction(x, y);\r\n  }\r\n\r\n  function handleMouseEnter(x:number, y:number)\r\n  {\r\n    if(!isMouseDown) return;\r\n\r\n    props.gridModel.processAction(x, y);\r\n  }\r\n\r\n  function getStatus(x:number, y:number)\r\n  {\r\n    if(props.gridModel.start.x === x && props.gridModel.start.y === y) return GRID_STATUS.START;\r\n    if(props.gridModel.target.x === x && props.gridModel.target.y === y) return GRID_STATUS.TARGET;\r\n    \r\n    for(let i=0; i<props.gridModel.path.length;i++)\r\n    {\r\n      if(props.gridModel.path[i].x === x && props.gridModel.path[i].y === y) return GRID_STATUS.PATH;\r\n    }\r\n\r\n    for(let i=0; i<props.gridModel.visitedNodes.length;i++)\r\n    {\r\n      if(props.gridModel.visitedNodes[i].x === x && props.gridModel.visitedNodes[i].y === y) return GRID_STATUS.VISITED;\r\n    }\r\n    \r\n    return GRID_STATUS.DEFAULT;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n        <table className=\"table\">      \r\n          {tiles.map((row: any[], xIndex: number) => (\r\n            <tr>\r\n              {row.map((item: any, yIndex: number) => (\r\n                <td>\r\n                  <GridNode\r\n                      x={xIndex}\r\n                      y={yIndex}\r\n\r\n                      walkable={item.walkable}\r\n                      status={getStatus(xIndex, yIndex)}\r\n\r\n                      processMouseClick={handleMouseDown}\r\n                      processMouseEnter={handleMouseEnter}\r\n                  ></GridNode>      \r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div> \r\n  );\r\n}","import { Coordinate } from \"./GridModel\";\r\n\r\nexport default class Grid\r\n{\r\n  private xSize:number = 0;\r\n  private ySize:number = 0;\r\n\r\n  private tiles:any = [];\r\n\r\n  constructor(xSize:number, ySize:number)\r\n  {\r\n    this.xSize = xSize;\r\n    this.ySize = ySize;\r\n\r\n    this.tiles = this.initializeTiles();\r\n  }\r\n\r\n  initializeTiles() \r\n  {\r\n    const tiles:any = [];\r\n\r\n    for(let i=0;i<this.xSize;i++)\r\n    {\r\n        const row:any = [];\r\n        for(let j=0;j<this.ySize;j++)\r\n        {\r\n            const gridNode:any = {x:i, y:j, walkable:true};\r\n            row.push(gridNode);\r\n        }\r\n\r\n        tiles.push(row);\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  clear()\r\n  {\r\n    this.tiles = this.initializeTiles();\r\n  }\r\n\r\n  toggleWalkable(x:number, y:number)\r\n  {\r\n    this.tiles[x][y].walkable = !this.tiles[x][y].walkable;\r\n  }\r\n\r\n  setWalkable(x:number, y:number, walkable:boolean)\r\n  {\r\n    this.tiles[x][y].walkable = walkable;\r\n  }\r\n\r\n  randomize(exceptionCoordinates:Coordinate[])\r\n  {\r\n    for(let i=0;i<this.xSize;i++)\r\n    {     \r\n      for(let j=0;j<this.ySize;j++)\r\n      {\r\n        let walkable:boolean = true;\r\n\r\n        //only process the tile if it's not in the list of exceptions\r\n        if(!this.containsCoordinate(exceptionCoordinates, i, j))\r\n        {\r\n          this.tiles[i][j].walkable = Math.random() > 0.3;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getNeighboringTiles(coordinate:any)\r\n  {\r\n    let neighbors:any = [];\r\n\r\n    //horizontal + vertical\r\n    if(this.isValidAndWalkable(coordinate.x-1, coordinate.y)) neighbors.push({x: coordinate.x-1, y:coordinate.y});\r\n    if(this.isValidAndWalkable(coordinate.x, coordinate.y-1)) neighbors.push({x: coordinate.x, y:coordinate.y-1});\r\n    if(this.isValidAndWalkable(coordinate.x+1, coordinate.y)) neighbors.push({x: coordinate.x+1, y:coordinate.y});\r\n    if(this.isValidAndWalkable(coordinate.x, coordinate.y+1)) neighbors.push({x:coordinate. x, y:coordinate.y+1});\r\n\r\n    //diagonals\r\n    // if(this.isValidAndWalkable(coordinate.x-1, coordinate.y-1)) neighbors.push({x: coordinate.x-1, y:coordinate.y-1});\r\n    // if(this.isValidAndWalkable(coordinate.x-1, coordinate.y+1)) neighbors.push({x: coordinate.x-1, y:coordinate.y+1});\r\n    // if(this.isValidAndWalkable(coordinate.x+1, coordinate.y-1)) neighbors.push({x: coordinate.x+1, y:coordinate.y-1});\r\n    // if(this.isValidAndWalkable(coordinate.x+1, coordinate.y+1)) neighbors.push({x:coordinate. x+1, y:coordinate.y+1});\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  getTiles()\r\n  {\r\n    return this.tiles.slice();\r\n  }\r\n\r\n  getTile(x:number, y:number)\r\n  {\r\n    return this.tiles[x][y];\r\n  }\r\n\r\n  containsCoordinate(coordinates:Coordinate[], x:number, y:number)\r\n  {\r\n    for(let i=0;i<coordinates.length;i++)\r\n    {\r\n      if(coordinates[i].x === x && coordinates[i].y === y) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isValidTileCoordinate(x:number, y:number)\r\n  {\r\n    if(x < 0 || x >= this.tiles.length) return false;\r\n    if(y < 0 || y >= this.tiles[0].length) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  isValidAndWalkable(x:number, y:number)\r\n  {\r\n    if(!this.isValidTileCoordinate(x, y)) return false;\r\n\r\n    return this.tiles[x][y].walkable;\r\n  }\r\n}","import Grid from \"../Pathfinding/Grid\"\r\n\r\nexport interface PathfindingResult\r\n{\r\n    path:any[];\r\n    visitedNodes:any[];\r\n}\r\n\r\nexport class PathfindingTile\r\n{\r\n    //store the link to backtrack\r\n    //this is more efficient than keeping track of another data structure   \r\n    link:PathfindingTile;\r\n \r\n    x:number;\r\n    y:number;\r\n\r\n    visited:boolean = false;\r\n\r\n    constructor(x:number, y:number)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport abstract class IPathfindable\r\n{\r\n    abstract getName():string;\r\n    abstract calculatePath(grid:Grid, start:any, target:any):any;\r\n\r\n    collectionContains(collection:any[], item:any)\r\n    {\r\n        for(let i=0;i<collection.length;i++)\r\n        {\r\n            if(collection[i].x === item.x &&\r\n               collection[i].y === item.y) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructPath(target:PathfindingTile)\r\n    {\r\n        let path:PathfindingTile[] = [];\r\n        \r\n        let activeNode = target;\r\n\r\n        while(activeNode !== undefined)\r\n        {\r\n            path.push(activeNode);\r\n\r\n            activeNode = activeNode.link;\r\n        }\r\n\r\n        return path.reverse();\r\n    }\r\n}","import {IPathfindable, PathfindingResult, PathfindingTile} from \"../Pathfinding\"\r\nimport Grid from \"../../Pathfinding/Grid\"\r\n\r\nclass PathfindingAStartTile extends PathfindingTile\r\n{\r\n    fScore:number = Infinity;\r\n    gScore:number = Infinity;\r\n\r\n    isInOpen:boolean = false;\r\n    isInClosed:boolean = false;\r\n\r\n    constructor(x:number, y:number)\r\n    {\r\n        super(x, y);\r\n    }\r\n}\r\n\r\nexport class AStar extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"AStar\"\r\n    }\r\n\r\n    calculateHeuristic(start:any, target:any)\r\n    {\r\n        return Math.abs(target.y - start.y) + Math.abs(target.x - start.x);\r\n    }\r\n\r\n    getLowestFScoreIndex(openSet:PathfindingAStartTile[])\r\n    {\r\n        let lowestIndex:number = 0;\r\n        let lowestFScore:number = Infinity;\r\n\r\n        for(let i=0;i<openSet.length;i++)\r\n        {\r\n            let node = openSet[i];\r\n            let fScore:any = node.fScore;\r\n\r\n            if(fScore < lowestFScore)\r\n            {\r\n                lowestFScore = fScore;\r\n                lowestIndex = i;\r\n            }\r\n        }\r\n\r\n        return lowestIndex;\r\n    }\r\n\r\n    process(grid:Grid, start:any, target:any)\r\n    {\r\n        //Initialize the open and closed sets\r\n        let openSet:PathfindingAStartTile[] = [];\r\n        let closedSet:PathfindingAStartTile[] = [];\r\n\r\n        let referenceTiles:any[][] = grid.getTiles();\r\n\r\n        //Initialize a customized 'copy' of the original tiles, to store specific data \r\n        //which is used to efficiently process the pathfinding algorithm\r\n        let tiles:PathfindingAStartTile[][] = new Array(referenceTiles.length);\r\n\r\n        for(let i=0;i<referenceTiles.length;i++)\r\n        {\r\n            let row:PathfindingAStartTile[] = new Array(referenceTiles[i].length);\r\n            for(let j=0;j<referenceTiles[i].length;j++)\r\n            {\r\n                row[j] = new PathfindingAStartTile(i, j);\r\n            }\r\n            tiles[i] = row;\r\n        }\r\n\r\n        //Add the start node to the open set\r\n        openSet.push(tiles[start.x][start.y]);\r\n        tiles[start.x][start.y].isInOpen = true;\r\n        \r\n        //Set the initial start heurisitc\r\n        tiles[start.x][start.y].fScore = this.calculateHeuristic(start, target);\r\n        tiles[start.x][start.y].gScore = 0;\r\n\r\n        while(openSet.length > 0)\r\n        {\r\n            //Select a new active node, which is the node with the lowest fScore\r\n            let activeNodeIndex = this.getLowestFScoreIndex(openSet);\r\n            let activeNode = openSet[activeNodeIndex];\r\n\r\n            //Remove the activenode from the open set\r\n            openSet.splice(activeNodeIndex, 1);\r\n\r\n            //Add the activenode to the closed set\r\n            closedSet.push(activeNode);\r\n            activeNode.isInClosed = true;\r\n\r\n            if(activeNode.x === target.x && activeNode.y === target.y)\r\n            {\r\n                //stop searching\r\n                let path = this.constructPath(activeNode);\r\n                \r\n                return {path:path, visitedNodes:closedSet};\r\n            }\r\n\r\n            //Go through all neighbors of the active node\r\n            const neighbors:any[] = grid.getNeighboringTiles(activeNode);\r\n\r\n            //Cache the active nodes GScore\r\n            let activeGScore:any = activeNode.gScore;\r\n\r\n            //add neighbors to queue, but only if not processed before\r\n            for(let i=0;i<neighbors.length;i++)\r\n            {    \r\n                let neighbor = tiles[neighbors[i].x][neighbors[i].y]\r\n\r\n                //Don't process neighbors that are in the closed list\r\n                if(neighbor.isInClosed) continue;\r\n\r\n                let neighborGScore:number = activeGScore + this.calculateHeuristic(activeNode, neighbor);\r\n                let neighborFScore:number = neighborGScore + this.calculateHeuristic(neighbor, target);\r\n\r\n                //Update the link\r\n                neighbor.link = activeNode;\r\n\r\n                if(neighbor.isInOpen)\r\n                {\r\n                    let neighborOldGScore:any = neighbor.gScore;\r\n                    if(neighborGScore > neighborOldGScore)\r\n                    {\r\n                        continue;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    neighbor.gScore = neighborGScore;\r\n                    neighbor.fScore = neighborFScore;\r\n\r\n                    openSet.push(neighbor);     \r\n                    neighbor.isInOpen = true;\r\n                }\r\n            }\r\n        }\r\n        return {path:[], visitedNodes:[]};\r\n    } \r\n\r\n    calculatePath(grid:Grid, start:any, target:any): PathfindingResult {\r\n        \r\n        const data:any = this.process(grid, start, target);\r\n\r\n        return {path: data.path, visitedNodes: data.visitedNodes};\r\n    }\r\n}","import {IPathfindable, PathfindingResult, PathfindingTile} from \"../Pathfinding\"\r\nimport Grid from \"../../Pathfinding/Grid\"\r\n\r\nexport class BFS extends IPathfindable\r\n{\r\n    getName(): string {\r\n        return \"BFS\"\r\n    }\r\n\r\n    process(grid:Grid, start:any, target:any)\r\n    {\r\n        let queue:any[] = [];\r\n        let visitedNodes:any[] = [];\r\n\r\n        let referenceTiles:any[][] = grid.getTiles();\r\n\r\n        //Initialize a customized 'copy' of the original tiles, to store specific data \r\n        //which is used to efficiently process the pathfinding algorithm\r\n        let tiles:PathfindingTile[][] = new Array(referenceTiles.length);\r\n\r\n        for(let i=0;i<referenceTiles.length;i++)\r\n        {\r\n            let row:PathfindingTile[] = new Array(referenceTiles[i].length);\r\n            for(let j=0;j<referenceTiles[i].length;j++)\r\n            {\r\n                row[j] = new PathfindingTile(i, j);\r\n            }\r\n            tiles[i] = row;\r\n        }\r\n\r\n        queue.push(tiles[start.x][start.y]);\r\n\r\n        //Add the start node to visited, because no link should be set to that node\r\n        visitedNodes.push(tiles[start.x][start.y]);\r\n        tiles[start.x][start.y].visited = true;\r\n\r\n        while(queue.length>0)\r\n        {\r\n            //Use first node in queue\r\n            let activeNode = queue.shift();          \r\n\r\n            //find neighbors of active node\r\n            const neighbors:any[] = grid.getNeighboringTiles(activeNode);\r\n\r\n            //add neighbors to queue, but only if not processed before\r\n            for(let i=0;i<neighbors.length;i++)\r\n            {\r\n                let neighbor = tiles[neighbors[i].x][neighbors[i].y];\r\n\r\n                if(neighbor.x === target.x && neighbor.y === target.y) \r\n                {\r\n                    //stop searching\r\n                    let path = this.constructPath(activeNode);\r\n                    \r\n                    return {path:path, visitedNodes:visitedNodes};\r\n                }                \r\n\r\n                if(!neighbor.visited)\r\n                {\r\n                    visitedNodes.push(neighbor);\r\n                    neighbor.visited = true;\r\n\r\n                    //add to queue\r\n                    queue.push(neighbor);\r\n\r\n                    //store the connected node\r\n                    neighbor.link = activeNode;\r\n                }        \r\n            }\r\n        }\r\n\r\n        return {path:[], visitedNodes:[]};\r\n    }\r\n\r\n    calculatePath(grid:Grid, start:any, target:any): PathfindingResult {\r\n        const data:any = this.process(grid, start, target);\r\n        \r\n        return {path: data.path, visitedNodes: data.visitedNodes};\r\n    }    \r\n}","import { GridModel } from \"./GridModel\";\r\n\r\nexport abstract class IAction\r\n{\r\n  abstract process(x:number, y:number):void;\r\n}\r\n\r\nexport class DefaultAction extends IAction\r\n{\r\n  process(x:number, y:number): void {\r\n  }\r\n}\r\n\r\nexport class ToggleAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n  callback:(grid:any) => void;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.toggleWalkable(x,y);\r\n  }\r\n}\r\n\r\nexport class WalkableAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n  walkable:boolean;\r\n  callback:(grid:any) => void;\r\n\r\n  constructor(gridModel:GridModel, walkable:boolean)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n    this.walkable = walkable;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.setWalkable(x,y, this.walkable);\r\n  }\r\n}\r\n\r\nexport class StartAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n  set:(value:any) => void;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.setStart(x,y);\r\n  }\r\n}\r\n\r\nexport class TargetAction extends IAction\r\n{\r\n  gridModel:GridModel;\r\n\r\n  constructor(gridModel:GridModel)\r\n  {\r\n    super();\r\n\r\n    this.gridModel = gridModel;\r\n  }\r\n\r\n  process(x:number, y:number): void {\r\n    this.gridModel.setTarget(x,y);\r\n  }\r\n}","import { GridModel } from \"./GridModel\";\r\n\r\nexport abstract class IAnimator\r\n{\r\n    abstract animate(path:any[], visitedNodes:any[], gridModel:GridModel):void;\r\n    abstract stop():void;\r\n}\r\n\r\nexport class InstantAnimator extends IAnimator\r\n{\r\n    animate(path:any[], visitedNodes:any[], gridModel:GridModel)\r\n    {\r\n        gridModel.displayPath(path, visitedNodes);\r\n    }\r\n\r\n    stop()\r\n    {\r\n        \r\n    }\r\n}\r\n\r\nexport class PathAnimator extends IAnimator\r\n{\r\n    readonly ANIMATION_STEP_TIMER:number = 50;\r\n\r\n    private timers:any = [];\r\n\r\n    animate(path:any[], visitedNodes:any[], gridModel:GridModel)\r\n    {\r\n        let pathCopy:any = [];\r\n\r\n        this.timers = []; \r\n\r\n        for(let i=0;i<path.length;i++)\r\n        {\r\n            //Store all timer IDs, as the animation can be cancelled\r\n            //By storing these, clearTimeout can be called on all IDs\r\n            this.timers.push(setTimeout(() => \r\n            {\r\n                pathCopy.push(path[i]);\r\n\r\n                gridModel.displayPath(pathCopy, visitedNodes);\r\n\r\n            }, i*this.ANIMATION_STEP_TIMER));\r\n        }\r\n    }\r\n\r\n    stop()\r\n    {\r\n        for(let i=0;i<this.timers.length;i++)\r\n        {\r\n            clearTimeout(this.timers[i]);\r\n        }\r\n    }\r\n}\r\n\r\ninterface OriginalClonePair\r\n{\r\n    original:any[];\r\n    clone:any[];\r\n}\r\n\r\nexport class PathAndVisitedNodesAnimator extends IAnimator\r\n{\r\n    readonly ANIMATION_STEP_TIMER:number = 50;\r\n\r\n    private timers:any = [];\r\n\r\n    animate(path:any[], visitedNodes:any[], gridModel:GridModel)\r\n    {\r\n        let pathCopy:any = [];\r\n        let visitedNodesCopy:any = [];\r\n\r\n        this.timers = []; \r\n\r\n        let animationCounter:number = 0;\r\n\r\n        let collections:OriginalClonePair[] = [];\r\n        collections.push({original: visitedNodes, clone: visitedNodesCopy});\r\n        collections.push({original: path, clone: pathCopy});\r\n\r\n        for(let i=0;i<collections.length;i++)\r\n        {\r\n            let pair:OriginalClonePair = collections[i];\r\n\r\n            for(let j=0;j<pair.original.length;j++)\r\n            {\r\n                //Store all timer IDs, as the animation can be cancelled\r\n                //By storing these, clearTimeout can be called on all IDs\r\n                this.timers.push(setTimeout(() => \r\n                {\r\n                    pair.clone.push(pair.original[j]);\r\n\r\n                    gridModel.displayPath(pathCopy, visitedNodesCopy);\r\n\r\n                }, animationCounter*this.ANIMATION_STEP_TIMER));\r\n\r\n                animationCounter++;\r\n            }\r\n        }\r\n    }\r\n\r\n    stop()\r\n    {\r\n        for(let i=0;i<this.timers.length;i++)\r\n        {\r\n            clearTimeout(this.timers[i]);\r\n        }\r\n    }\r\n}","import Grid from \"./Grid\"\r\nimport {IPathfindable, PathfindingResult} from \"../../Logic/Pathfinding/Pathfinding\";\r\nimport {AStar} from \"../../Logic/Pathfinding/PathfindingMethods/Astar\"\r\nimport {BFS} from \"../../Logic/Pathfinding/PathfindingMethods/BFS\"\r\n\r\nimport {IAction, WalkableAction, DefaultAction, ToggleAction, StartAction, TargetAction} from \"../../Logic/Pathfinding/Action\";\r\nimport {IAnimator, InstantAnimator, PathAnimator, PathAndVisitedNodesAnimator} from \"../../Logic/Pathfinding/Animation\"\r\n\r\nexport class Coordinate\r\n{\r\n    x:number;\r\n    y:number;\r\n\r\n    constructor(x:number, y:number)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport class GridModel\r\n{\r\n    grid:Grid = new Grid(30, 30);\r\n\r\n    pathTypes:IPathfindable[] = [new BFS(), new AStar()];\r\n    activePathIndex:number = 0;\r\n\r\n    activeAction:IAction = new DefaultAction();\r\n    activeAnimation:IAnimator = new InstantAnimator();\r\n\r\n    start:Coordinate = new Coordinate(-1, -1);\r\n    target:Coordinate = new Coordinate(-1, -1);\r\n\r\n    path:Coordinate[] = [];\r\n    visitedNodes:Coordinate[] = [];\r\n\r\n    observers:any[] = [];\r\n\r\n    calculateOnChange:boolean = true;\r\n\r\n    constructor()\r\n    {\r\n\r\n    }\r\n\r\n    setPathfindingIndex(index:number)\r\n    {\r\n        if(index < 0 || index >= this.pathTypes.length) return;\r\n\r\n        this.activePathIndex = index;\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    setActionIndex(index:number)\r\n    {\r\n        switch(index)\r\n        {\r\n            case 0:\r\n                this.activeAction = new WalkableAction(this, true);\r\n                break;\r\n            case 1:\r\n                this.activeAction = new WalkableAction(this, false);\r\n                break;\r\n            case 2:\r\n                this.activeAction = new StartAction(this);\r\n                break;\r\n            case 3:\r\n                this.activeAction = new TargetAction(this);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    setEnableAnimation(enableAnimation:boolean)\r\n    {\r\n        this.activeAnimation.stop();\r\n\r\n        if(enableAnimation)\r\n        {\r\n            this.activeAnimation = new PathAndVisitedNodesAnimator();\r\n        }\r\n        else\r\n        {\r\n            this.activeAnimation = new InstantAnimator();\r\n        }\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    processAction(x:number, y:number)\r\n    {\r\n        this.activeAction.process(x, y);\r\n    }\r\n\r\n    setAction(action:IAction)\r\n    {\r\n        this.activeAction = action;\r\n    }\r\n\r\n    clearGrid()\r\n    {\r\n        //clear the grid\r\n        this.grid.clear();\r\n\r\n        //clear start and end positions\r\n        this.start = new Coordinate(-1, -1);\r\n        this.target = new Coordinate(-1, -1);\r\n\r\n        //clear paths\r\n        this.path = [];\r\n        this.visitedNodes = [];\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    randomizeGrid()\r\n    {\r\n        let exceptions:Coordinate[] = [];\r\n        exceptions.push(new Coordinate(this.start.x, this.start.y));\r\n        exceptions.push(new Coordinate(this.target.x, this.target.y));\r\n\r\n        this.grid.randomize(exceptions);\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    calculatePath()\r\n    {\r\n        if(!this.grid.isValidTileCoordinate(this.start.x, this.start.y)) return;\r\n        if(!this.grid.isValidTileCoordinate(this.target.x, this.target.y)) return;\r\n\r\n        let start = this.grid.getTile(this.start.x, this.start.y);\r\n        let target = this.grid.getTile(this.target.x, this.target.y);\r\n\r\n        let data:PathfindingResult = this.pathTypes[this.activePathIndex].calculatePath(this.grid, start, target);  \r\n         \r\n        //Cancel the previous animation if one was being executed\r\n        this.activeAnimation.stop();\r\n        \r\n        //Trigger the new animation \r\n        this.activeAnimation.animate(data.path, data.visitedNodes, this);\r\n    }\r\n\r\n    displayPath(path:any[], visitedNodes:any[])\r\n    {\r\n        this.path = path;\r\n        this.visitedNodes = visitedNodes;\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    toggleWalkable(x:number, y:number)\r\n    {\r\n        this.grid.toggleWalkable(x,y);\r\n\r\n        this.processChange();\r\n    }\r\n    \r\n    setWalkable(x:number, y:number, walkable:boolean)\r\n    {\r\n        this.grid.setWalkable(x, y, walkable);\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    setStart(x:number, y:number)\r\n    {\r\n        if(!this.grid.isValidAndWalkable(x, y)) return;\r\n\r\n        this.start = new Coordinate(x, y);\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    setTarget(x:number, y:number)\r\n    {\r\n        if(!this.grid.isValidAndWalkable(x, y)) return;\r\n\r\n        this.target = new Coordinate(x, y);\r\n\r\n        this.processChange();\r\n    }\r\n\r\n    processChange()\r\n    {\r\n        //Only recalculate the path if the setting explicity mentions it\r\n        if(this.calculateOnChange)  \r\n        {\r\n            this.calculatePath();\r\n        }\r\n        else\r\n        {\r\n            //clean the path + visitedNodes\r\n            this.path = [];\r\n            this.visitedNodes = [];\r\n\r\n            this.activeAnimation.stop();\r\n        }\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    attachObserver(observer:any)\r\n    {\r\n        if(!this.observers.includes(observer))\r\n        {\r\n            this.observers.push(observer);\r\n        }\r\n    }\r\n\r\n    notifyObservers()\r\n    {\r\n        let tiles = this.grid.getTiles();\r\n\r\n        this.observers.forEach(callback => {\r\n            callback(tiles);\r\n        });\r\n    }\r\n}","import \"./GridProject.css\"\r\n\r\nimport Toolbar from \"../../Components/Toolbar/Toolbar\"\r\nimport NavigationGrid from \"../../Components/NavigationGrid/NavigationGrid\"\r\nimport { GridModel } from \"../../Logic/Pathfinding/GridModel\"\r\n\r\n//Logic imports\r\nimport { ToolbarItemInput } from \"../../Components/Toolbar/Toolbar\";\r\n\r\nfunction generateToolbarItemInput_Pathfinding(defaultIndex:number, onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [\"BFS\", \"A-star(*)\"];\r\n \r\n    return new ToolbarItemInput(\"Pathfinding\", names, defaultIndex, onIndexChanged);\r\n}\r\n\r\nfunction generateToolbarItemInput_ActionTypes(defaultIndex:number, onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [\"Walkable\", \"Non-walkable\", \"Set Start\", \"Set Target\"];\r\n    return new ToolbarItemInput(\"Tile actions\", names, defaultIndex, onIndexChanged);\r\n}\r\n\r\nfunction generateToolbarItemInput_SingleActions(onIndexChanged:(index:number)=>void):ToolbarItemInput\r\n{\r\n    let names:string[] = [\"Clear\", \"Randomize\", \"Calculate\"];\r\n    return new ToolbarItemInput(\"Grid actions\", names, -1, onIndexChanged);\r\n}\r\n\r\nexport default function GridProject()\r\n{\r\n    let gridModel:GridModel = new GridModel();\r\n\r\n    let inputToggleItems:ToolbarItemInput[] = [];\r\n    let inputButtonItems:ToolbarItemInput[] = [];\r\n\r\n    let defaultPathfindTypeIndex:number = 0;\r\n    let defaultActionTypeIndex:number = 2;\r\n\r\n    inputToggleItems.push(generateToolbarItemInput_Pathfinding(defaultPathfindTypeIndex, setPathfindIndex));\r\n    inputToggleItems.push(generateToolbarItemInput_ActionTypes(defaultActionTypeIndex, setActionTypeIndex));\r\n    \r\n    inputButtonItems.push(generateToolbarItemInput_SingleActions(setSingleActionIndex));\r\n\r\n    gridModel.setPathfindingIndex(defaultPathfindTypeIndex);\r\n    gridModel.setActionIndex(defaultActionTypeIndex);\r\n\r\n    function setPathfindIndex(index:number)\r\n    {\r\n        gridModel.setPathfindingIndex(index);\r\n    }\r\n    function setActionTypeIndex(index:number)\r\n    {\r\n        gridModel.setActionIndex(index);\r\n    }\r\n    function setSingleActionIndex(index:number)\r\n    {\r\n        switch(index)\r\n        {\r\n            case 0:\r\n                gridModel.clearGrid();\r\n                break;\r\n            case 1:\r\n                gridModel.randomizeGrid();\r\n                break;\r\n            case 2:\r\n                gridModel.calculatePath();\r\n                break;\r\n        }\r\n    }\r\n\r\n    function setAnimationEnabled(enabled:boolean)\r\n    {\r\n        gridModel.setEnableAnimation(enabled);\r\n    }\r\n\r\n    return(\r\n        <div className=\"grid-container\">\r\n            <div id=\"control-panel\">\r\n                <Toolbar \r\n                    itemGroups={inputToggleItems}\r\n                    itemButtons={inputButtonItems}\r\n                    onCheckedChanged = {setAnimationEnabled}\r\n                />\r\n            </div>\r\n            <div id=\"display\">\r\n                <NavigationGrid gridModel={gridModel}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from \"../Components/NavigationBar/NavigationBar\"\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nimport GridProject from \"../Components/GridProject/GridProject\"\r\n\r\nexport default function About()\r\n{  \r\n  return(\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <GridProject/>      \r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )  \r\n}","import \"./ProjectList.css\"\r\n\r\nimport ProjectData from '../../Logic/ProjectInformation/ProjectData'\r\n\r\ninterface Props\r\n{\r\n    entries:ProjectData[];\r\n}\r\n\r\nexport default function ProjectList(props:Props)\r\n{\r\n    return(\r\n        <div className=\"project-container\">\r\n             {\r\n                props.entries.map((item:ProjectData, index) => \r\n                (\r\n                    <a className=\"project-entry\" href={item.url}>\r\n                        <div className=\"project-entry-description\">{item.description}</div>\r\n                        <img className=\"project-entry-image\" src={item.image}></img>\r\n                    </a>      \r\n                ))\r\n            } \r\n        </div>\r\n    )\r\n}","export default interface ProjectData\r\n{\r\n    url:string;\r\n    description:string,\r\n    image:string;\r\n}\r\n\r\nexport const ProjectDataEntries: Array<ProjectData> =\r\n[\r\n    {\r\n        url: \"/projects/pathfinding\",\r\n        description: \r\n            \"Pathfinding Visualization - A simple tool to visualize different pathfinding strategies. \\\r\n            Visualize the steps taken by the algorithm to get to the resulting path.\"\r\n        ,\r\n        image: \"pathfinding.png\",\r\n    },\r\n    {\r\n        url: \"projects/chess\",\r\n        description: \"Chess Engine\",\r\n        image: \"chess.png\",\r\n    },\r\n]","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from \"../Components/NavigationBar/NavigationBar\"\r\nimport Footer from '../Components/Footer/Footer'\r\nimport ProjectList from '../Components/ProjectList/ProjectList'\r\nimport {ProjectDataEntries} from \"./../Logic/ProjectInformation/ProjectData\"\r\n\r\nexport default function SoftwareProjects()\r\n{  \r\n  return(\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <ProjectList entries={ProjectDataEntries}/>      \r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )  \r\n}","import \"./DropdownItem.css\"\r\n\r\ninterface Props\r\n{\r\n  title:string;\r\n  selected:boolean;\r\n  index:number;\r\n\r\n  setIndex:(index:number) => void;\r\n}\r\n\r\nexport default function DropdownItem(props:Props)\r\n{\r\n    function getStyle() \r\n    {\r\n        let style = \"dropdown-item \";\r\n\r\n        if(props.selected)\r\n        {\r\n            style += \"dropdown-item-selected\";\r\n        }\r\n        else\r\n        {\r\n            style += \"dropdown-item-idle\";\r\n        }\r\n\r\n        return style;\r\n    }    \r\n\r\n    return(\r\n        <div>\r\n            <div className={getStyle()}\r\n                 onClick={event => \r\n                    {\r\n                        props.setIndex(props.index);\r\n                    }}\r\n            >\r\n                {props.title}\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import \"./DropdownHeader.css\"\r\n\r\ninterface Props\r\n{\r\n  \r\n}\r\n\r\nexport default function DropdownHeader(props:Props)\r\n{\r\n    return(\r\n        <div>\r\n            <div className=\"dropdown-header\">\r\n                <img className=\"dropdown-logo\" src=\"youtube.png\"></img>\r\n                YouTube (joris1992)\r\n            </div>\r\n        </div>     \r\n    )\r\n}","import \"./Dropdown.css\"\r\nimport DropdownItem from \"./DropdownItem/DropdownItem\"\r\nimport DropdownHeader from \"./DropdownHeader/DropdownHeader\"\r\n\r\nimport YoutubeProjectData from \"./../../Logic/ProjectInformation/YoutubeProjects\"\r\n\r\ninterface Props\r\n{\r\n  entries:Array<YoutubeProjectData>;\r\n  activeIndex:number;\r\n\r\n  setIndex:(index:number) => void;\r\n}\r\n\r\nexport default function Dropdown(props:Props)\r\n{\r\n    function getSelectedStatus(index:number)\r\n    {\r\n        return index === props.activeIndex;\r\n    }\r\n\r\n    return(\r\n        <div className=\"dropdown-body\">\r\n            <DropdownHeader/>\r\n            {\r\n                props.entries.map((item:YoutubeProjectData, index) => \r\n                (\r\n                    <DropdownItem title={item.description}\r\n                                    selected={getSelectedStatus(index)}\r\n                                    index={index}\r\n                                    setIndex={props.setIndex}\r\n                    />            \r\n                ))\r\n            } \r\n        </div>    \r\n    )\r\n}","import \"./SheetDisplayer.css\"\r\n\r\ninterface Props\r\n{\r\n    image:string;\r\n    location:string;\r\n}\r\n\r\ninterface test\r\n{\r\n    title:string;\r\n    class:string,\r\n    url:string;\r\n}\r\n\r\nconst menuItems: Array<test> =\r\n[\r\n    {title: \"Home\", class: \"nav-item\", url: \"/\"},\r\n    {title: \"About\", class: \"nav-item\", url: \"/about\"},\r\n    {title: \"Software Projects\", class: \"nav-item\", url: \"/software\"},\r\n    {title: \"Youtube\", class: \"nav-item\", url: \"/youtube\"},\r\n]\r\n\r\nexport default function SheetDisplayer(props:Props)\r\n{\r\n    return(\r\n        <div className=\"sheet-container\">\r\n            <div id=\"preview\">\r\n                <img className=\"preview-image\" src=\"music.png\"></img>\r\n            </div>\r\n            <div id=\"overview\">\r\n                <div className=\"sheet-body\">\r\n                    <ul className=\"sheet-grid\">\r\n                        {\r\n                            menuItems.map((item:test, index) => \r\n                            (\r\n                                <li>\r\n                                    <img className=\"sheet-item\" src={props.image} alt=\"ss\"></img>\r\n                                </li>                  \r\n                            ))                                     \r\n                        }\r\n                    </ul> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import \"./YoutubeEmbed.css\"\r\n\r\ninterface Props\r\n{\r\n    description:string;\r\n    url:string;\r\n}\r\n\r\nexport default function YoutubeEmbed(props:Props)\r\n{\r\n    return(\r\n        <div className=\"embed-body\"> \r\n            <iframe\r\n                src={props.url} \r\n                title=\"YouTube video player\" \r\n                frameBorder=\"0\" \r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                allowFullScreen>\r\n            </iframe>\r\n        </div>     \r\n    )\r\n}\r\n\r\n","import YoutubeProjectData from \"../../../Logic/ProjectInformation/YoutubeProjects\"\r\nimport YoutubeEmbed from \"../../YoutubeEmbed/YoutubeEmbed\"\r\nimport \"./ProjectContainerItem.css\"\r\n\r\ninterface Props\r\n{\r\n  entry:YoutubeProjectData\r\n}\r\n\r\nexport default function ProjectContainerItem(props:Props)\r\n{\r\n    return(\r\n        <div className=\"projectcontainer-container\">\r\n            <div className=\"projectcontainer-item\">\r\n                {/* Square\r\n                Video top \r\n                bottom row has the download button */}\r\n                <div className=\"projectcontainer-item-video\">\r\n                    <YoutubeEmbed \r\n                        description={props.entry.description}\r\n                        url={props.entry.url}\r\n                    />\r\n                </div>\r\n                <div className=\"projectcontainer-item-description\">\r\n                    {props.entry.description}\r\n\r\n                    <a href={props.entry.location} download>\r\n                        <img className=\"projectcontainer-item-logo\" src=\"pdf.png\" ></img>  \r\n                    </a>           \r\n                </div>       \r\n            </div>\r\n        </div>         \r\n    )\r\n}","export default interface YoutubeProjectData\r\n{\r\n    url:string;\r\n    description:string,\r\n    image:string;\r\n    location:string;\r\n}\r\n\r\nexport const YoutubeProjectEntries: Array<YoutubeProjectData> =\r\n[\r\n    {\r\n        url: \"https://www.youtube.com/embed/Kmu96X8t9F0\",\r\n        description: \"Death Note - Low of Solipsism\",\r\n        image: \"music.png\",\r\n        location: \"sheet_music/Death Note - Low of Solipsism.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/L0et5Yf25h8\",\r\n        description: \"One Piece - Becoming the Pirate King\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Becoming the Pirate King.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/WNMRrK5s5zc\",\r\n        description: \"One Piece - Difficult\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Difficult.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/hrvGv3K-t68\",\r\n        description: \"One Piece - The Very Very Very Strongest\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - The Very Very Very Strongest.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/9ZwATJgLNKc\",\r\n        description: \"One Piece - The Worlds Number One\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - The Worlds Number One.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/49xRC3QFnvg\",\r\n        description: \"One Piece - To the Grand Line\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - To the Grand Line.pdf\"\r\n    },\r\n    {\r\n        url: \"https://www.youtube.com/embed/UHXxULlzd_4\",\r\n        description: \"One Piece - Wake Up\",\r\n        image: \"image.png\",\r\n        location: \"sheet_music/One Piece - Wake Up.pdf\"\r\n    },\r\n]","import \"./ProjectContainer.css\"\r\n\r\nimport Dropdown from '../Dropdown/Dropdown'\r\nimport SheetDisplayer from \"../SheetDisplayer/SheetDisplayer\"\r\nimport ProjectContainerItem from \"./ProjectContainerItem/ProjectContainerItem\"\r\n\r\nimport {YoutubeProjectEntries} from \"./../../Logic/ProjectInformation/YoutubeProjects\"\r\n\r\nimport {useState} from 'react'\r\n\r\nexport default function ProjectContainer()\r\n{\r\n    const [index, setIndex] = useState(0);\r\n\r\n    function updateIndex(index:number)\r\n    {\r\n        setIndex(index);\r\n    }\r\n\r\n    return(\r\n        <div className=\"project-body\">\r\n            <div id=\"dropdown\">\r\n                <Dropdown entries={YoutubeProjectEntries}\r\n                            activeIndex={index}\r\n                            setIndex={updateIndex}/>\r\n            </div>\r\n            <div id=\"video\">\r\n                <ProjectContainerItem entry={YoutubeProjectEntries[index]}/>\r\n            </div>\r\n            <div id=\"sheet\">\r\n                <SheetDisplayer image={YoutubeProjectEntries[index].image}\r\n                                location={YoutubeProjectEntries[index].location}/>\r\n            </div>\r\n        </div>     \r\n    )\r\n}\r\n","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from '../Components/NavigationBar/NavigationBar'\r\nimport ProjectContainer from '../Components/ProjectContainer/ProjectContainer'\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nexport default function Youtube() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <ProjectContainer/>\r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from \"../Components/NavigationBar/NavigationBar\"\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nimport GridProject from \"../Components/GridProject/GridProject\"\r\n\r\nexport default function Project_Pathfinding()\r\n{  \r\n  return(\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        <GridProject/>      \r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )  \r\n}","import \"./Home.css\"\r\n\r\n//component imports\r\nimport NavigationBar from \"../Components/NavigationBar/NavigationBar\"\r\nimport Footer from '../Components/Footer/Footer'\r\n\r\nexport default function Project_Chess()\r\n{  \r\n  return(\r\n    <div className=\"container\">\r\n      <div id=\"nav\">\r\n        <NavigationBar/>\r\n      </div>\r\n      <div id=\"main\">\r\n        This is where the CHESS stuff should come   \r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  )  \r\n}","import { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\n// page imports\r\nimport Home from '../Body/Home';\r\nimport About from '../Body/About'\r\nimport SoftwareProjects from '../Body/SoftwareProjects';\r\nimport Youtube from '../Body/Youtube'\r\nimport Project_Pathfinding from '../Body/Project_Pathfinding'\r\nimport Project_Chess from '../Body/Project_Chess'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch> {/* The Switch decides which component to show based on the current URL.*/}\r\n\r\n        {/* Tab pages */}\r\n        <Route exact path='/' component={Home}></Route>\r\n        <Route exact path='/about' component={About}></Route>\r\n        <Route exact path='/software' component={SoftwareProjects}></Route>\r\n        <Route exact path='/youtube' component={Youtube}></Route>\r\n\r\n        {/* Projects  */}\r\n        <Route exact path='/projects/pathfinding' component={Project_Pathfinding}></Route>\r\n        <Route exact path='/projects/chess' component={Project_Chess}></Route>\r\n\r\n      </Switch>\r\n    </BrowserRouter> \r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Master from './Pages/Main'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Master/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}